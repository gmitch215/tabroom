<%args>
	$tourn
	$tourn_settings
	$person
	$session
	$perms
</%args>
<%init>

	my $wipe;

	use utf8;
	use Text::CSV;
	use Text::Undiacritic qw(undiacritic);

	unless ($perms->{"owner"}) {
		$m->comp("/funclib/abort.mas",
			message => "Access denied"
		);
	}

	my $req = Apache2::Request->new($r);
	my @csv_handles = $r->upload();

	my @problems;
	my %counts;
	my %already;

    if (@csv_handles) {

		my $dbh = Tab::DBI->db_Main();

		my $entries_sth = $dbh->prepare("
			select
				person.id, person.email, person.first, person.phone, person.first, person.last, person.nsda,
				vc.id vaccine_id, vc.value status
			from person
				left join person_setting vc on vc.tag = 'vaccine_".$tourn->id ."' and vc.person = person.id

				where exists (
					select student.id
					from student, entry_student es, entry, event
					where event.tourn = ?
					and event.id = entry.event
					and entry.id = es.entry
					and es.student = student.id
					and student.person = person.id
				)
		");

		$entries_sth->execute($tourn->id);
		my $entries_ref = $entries_sth->fetchall_hash();
		$entries_sth->finish();

		my $judges_sth = $dbh->prepare("
			select
				person.id, person.email, person.phone, person.first, person.last, person.nsda,
				vc.id vaccine_id, vc.value status
			from (person, judge, category)
				left join person_setting vc on vc.tag = 'vaccine_".$tourn->id."' and vc.person = person.id

			where category.tourn = ?
				and category.id = judge.category
				and judge.person = person.id
		");

		my $create_sth = $dbh->prepare("
			insert into person_setting (tag, person, value) values ('vaccine_".$tourn->id."', ?, ?)
		");

		my $update_sth = $dbh->prepare("
			update person_setting set value = ? where id = ?
		");

		my $wipe_sth = $dbh->prepare("
			delete from person_setting where person = ? and tag = ?
		");

		$judges_sth->execute($tourn->id);
		my $judges_ref = $judges_sth->fetchall_hash();
		$judges_sth->finish();

		my @people = @{$entries_ref};
		push @people, @{$judges_ref};

		my %targets;

		foreach my $tag ("id", "nsda", "email", "phone") {
			%{$targets{$tag}} = map {$_->{$tag} => $_} @people;
		}

		%{$targets{"name"}} = map {$_->{"first"}."-".$_->{"last"} => $_} @people;

        # Get the upload and create the file handle.
        my $csv_file = $req->upload($csv_handles[0]);
        my $io = $csv_file->io;
        my $csv = Text::CSV->new({ sep_char => ',' });

		my %created = ();

        LINE:
        foreach my $line (<$io>) {

			$line =~ s/"[^"]*[^"]*"//g;
			$csv->parse($line);

            my (
				$type, $school, $staff,
				$first, $middle, $last,
				$email, $phone, $group, $status,
				@garbage
			)= $csv->fields();

			unless ($email) {

				my $try = undiacritic($line);

				$csv->parse($try);

				( $type, $school, $staff,
					$first, $middle, $last,
					$email, $phone, $group, $status,
					@garbage
				)= $csv->fields();
			}

			unless ($email) {

				($type, $school, $staff,
					$first, $middle, $last,
					$email, $phone, $group, $status,
					@garbage
				)= split(/\,/, $line);
			}

			next unless $email;

			chomp $email;
			$email =~ s/\s+//g;
			$email = lc($email);

			# in case we have to mass unconfirm the partial dose bogons
			my $partial;
			my $original = $status;

			if ($status eq "partial dose") {
				$status = "pending";
			}

			if ($status eq "not submitted") {
				undef $status;
			}

			if ($type eq "Member Type") {
				next;
			}

			my $target;
			my $id;
			my $nsda;

			if (index($staff, "TR") == -1) {
				$nsda = $staff;
				$nsda =~ s/[\D_]//g;
			} else {
				$id = $staff;
				$id =~ s/[\D_]//g;
			}

			if ($id && $targets{"id"}{$id}) {
				$target = $targets{"id"}{$id};
			} elsif ($nsda && $targets{"nsda"}{$nsda} && lc($targets{"nsda"}{$nsda}->{'last'}) eq lc($last)) {
				$target = $targets{"nsda"}{$nsda};
			} elsif ($phone > 0 && $targets{"phone"}{$phone}
				&& lc($targets{"phone"}{$phone}->{"last"}) eq lc($last)
				&& lc($targets{"phone"}{$phone}->{"first"}) eq lc($first)
			) {
				$target = $targets{"phone"}{$phone};
			} elsif ($phone > 0 && $targets{"phone"}{$phone} && lc($targets{"phone"}{"1".$phone}->{"last"}) eq lc($last)) {
				$target = $targets{"phone"}{"1".$phone};
			} elsif ($email && $targets{"email"}{$email} && lc($targets{"email"}{$email}->{"last"}) eq lc($last)) {
				$target = $targets{"email"}{$email};
			} elsif ($nsda && $targets{"nsda"}{$nsda}) {

				$target = $targets{"nsda"}{$nsda};

			} elsif ($phone && $targets{"phone"}{$phone}) {

				$target = $targets{"phone"}{$phone};

			} elsif ($phone && $targets{"phone"}{$phone}) {

				$target = $targets{"phone"}{"1".$phone};

			} elsif ($email && $targets{"email"}{$email}) {

				$target = $targets{"email"}{$email};

			} elsif ($targets{"name"}{$first."-".$last}) {
				$target = $targets{"name"}{$first."-".$last};
			} else {

				my %problem = (
					type   => $type,
					first  => $first,
					middle => $middle,
					last   => $last,
					nsda   => $nsda,
					school => $school,
					email  => $email,
					phone  => $phone,
					group  => $group,
					status => $status
				);

				push @problems, \%problem;
				next LINE;
			}

			unless ($already{$target->{"id"}} eq "confirmed") {
				if ($wipe && ($status ne $target->{"status"})) {
					$wipe_sth->execute($target->{"id"}, "vaccine_".$tourn->id);
					undef $target->{"status"};
				}
			}

			if (
				($target->{'status'} ne "confirmed")
				&& (not defined $partial)
				&& ($status ne $target->{'status'})
			) {

				if ($status) {
					if ($target->{"vaccine_id"}) {
						$update_sth->execute($status, $target->{'vaccine_id'});
						$counts{"updated"}++;
						$already{$target->{"id"}} = $status;
					} elsif ($created{$target->{"id"}}) {

					} else {
						$create_sth->execute($target->{"id"}, $status);
						$already{$target->{"id"}} = $status;
						$counts{"recorded"}++;
						$created{$target->{'id'}}++;
					}
				} else {
					$wipe_sth->execute($target->{"id"}, "vaccine_".$tourn->id);
				}
			}
		}
	}

</%init>

	<& "menu.mas",
		tourn          => $tourn,
		tourn_settings => $tourn_settings,
		perms          => $perms,
		person         => $person,
		whoami         => 'vaccine_import'
	&>

	<div class="main">

%		if (@csv_handles) {

			<div id="output">

				<h5>File upload results:</h5>

				<p><% $counts{'recorded'} ? $counts{'recorded'} : "0" %> vaccine status recorded for the first time</p>
				<p><% $counts{'updated'} ? $counts{'updated'} : "0" %> vaccine statuses updated</p>

				<div class='full bluebordertop'>
					<span class="seveneighths">
						<h6>VaccineCheck users not found in this tournament</h6>
					</span>

					<span
						class = "eighth rightalign nospace marleft true"
						id    = "missing_buttonarea"
					>
					</span>
				</div>

				<& "/funclib/tablesorter.mas", table => "missing" &>

				<table id = "missing">

					<thead>
						<tr class="yellowrow">
							<th>
								First
							</th>
							<th>
								Middle
							</th>
							<th>
								Last
							</th>
							<th>
								Email
							</th>
							<th>
								Phone
							</th>
							<th>
								NSDA/TRID
							</th>
							<th>
								School
							</th>
							<th>
								Status
							</th>
						</tr>
					</thead>

					<tbody>
%						foreach my $problem (@problems) {
							<tr>
								<td>
									<% $problem->{'first'} %>
								</td>

								<td>
									<% $problem->{'middle'} %>
								</td>

								<td>
									<% $problem->{'last'} %>
								</td>

								<td>
									<% $problem->{'email'} %>
								</td>

								<td>
									<% $problem->{'phone'} %>
								</td>

								<td>
									<% $problem->{'nsda'} %>
								</td>

								<td>
									<% $problem->{'school'} %>
								</td>

								<td>
									<% $problem->{'status'} %>
								</td>
							</tr>
%						}
					</tbody>
				</table>
			</div>
%		}

		<div id="uploader">

			<h3><% $tourn->name %></h3>

			<h5 class="martopmore">Import VaccineCheck Data</h5>

			<div class="even">
				<& "/funclib/uploader.mas",
					url      => "vaccine_import.mhtml",
					session  => $session,
					filename => "importCsv",
					output   => "output",
					hideme   => "uploader",
					submit   => "Import VC Data"
				&>
			</div>
		</div>
	</div>


