<%args>
	$panel_id => undef
</%args>
<%init>

	use List::Util 'shuffle';
	use REST::Client;

	my $now = DateTime->now();

	Tab::Round->set_sql( pending => "
		select round.*
			from round, round_setting, event, tourn
		where round.id = round_setting.round
			and round_setting.tag = 'strikes_published'
			and round_setting.value = 1
			and (round.published != 1 or round.published is NULL)
	        and round.event = event.id
			and event.tourn = tourn.id
			and tourn.end > NOW()

		order by round.start_time
	");

	foreach my $round ( Tab::Round->search_pending() ) {

		my $limit  = $round->setting("strikes");
		next unless $limit;

		my $auto    = $round->setting("strikes_auto");
		my $instant = $round->setting("strikes_instapublish");
		my $target  = $round->setting("strikes_panel_size");
		my $due     = $round->setting("strikes_due");

		my $event;
		my $tourn;
		my $tourn_settings;

		if ($instant) {
			$event = $round->event;
			$tourn = $event->tourn;
			%{$tourn_settings} = $tourn->all_settings();
		}

		my %struck_panels = eval {
			return %{JSON::decode_json($round->setting("strike_panels"))};
		};

		my $after;
		$after++ if $due < $now;

		my $undone;

		foreach my $panel ($round->panels()) {

			next if $panel->bye();
			next if $struck_panels{$panel->id};

			my $result = process_panel($panel, $limit, $auto, $target, $after);

			if ($result) {
				$struck_panels{$panel->id}++;
				if ($instant) {
					sendBlast("Strike Cards completed.", $panel);
				}

			} else {
				$undone++;
			}
		}

		$round->setting("strike_panels", "text", JSON::encode_json(\%struck_panels));

		if ($auto && (not defined $undone) && (not defined $instant)) {

			$round->published(1);
			$round->update();
			$round->setting("strikes_published", 0);

			eval {
				$m->comp("/panel/schemat/blast.mhtml",
					scheduled => 1,
					tourn     => $round->event->tourn,
					round_id  => $round->id,
					confirm   => "yup"
				);
				$round->setting("blasted", "date", $now);
			};
		}
	}

	sub process_panel {

		my ($panel, $limit, $auto, $target, $after) = @_;
		my %entry_strike_count = ();
		my %the_struck = ();

		foreach my $ballot ($panel->ballots) {

			my $did;

			if ($ballot->scores(tag => "no_strike")) {
				$entry_strike_count{$ballot->entry->id} = $limit;
				$did++;
			}

			if ($ballot->scores(tag => "strike")) {
				$the_struck{$ballot->judge->id}++;
				$entry_strike_count{$ballot->entry->id}++;
				$did++;
			}

			unless ($did || (defined $entry_strike_count{$ballot->entry->id})) {
				$entry_strike_count{$ballot->entry->id} = 0;
			}
		}

		foreach my $entry_id (keys %entry_strike_count) {
			if (
				($entry_strike_count{$entry_id} < $limit)
				&& (not defined $after)
			) {
				return;
			}
		}

		my @judges;

		foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $panel)) {

			if ($the_struck{$judge->id}) {

				$m->comp("/funclib/judge_rm.mas",
					judge => $judge,
					panel => $panel,
				);

			} else {
				push @judges, $judge;
			}
		}

		if ($auto) {

			my $counter;
			my $taken;

			if ($target) {

				while ( (scalar @judges) > $target ) {

					$counter++;

					@judges = shuffle(@judges);
					my $rando = shift @judges;
					$taken .= $rando->first." ".$rando->last." ";

					$m->comp("/funclib/judge_rm.mas",
						judge => $rando,
						panel => $panel,
					);
				}
			}


			unless ( (scalar @judges) % 2 || (scalar @judges < 1) ) {

				$counter++;

				@judges = shuffle(@judges);
				my $rando = shift @judges;
				$taken .= $rando->first." ".$rando->last." ";

				$m->comp("/funclib/judge_rm.mas",
					judge => $rando,
					panel => $panel,
				);
			}

			$m->comp("/funclib/log.mas",
				type        => "autostrike",
				description => "Deadline reached. Randomly removed ".$taken,
				panel       => $panel->id,
				person      => 0
			);
		}
		return 1;
	}

	sub sendBlast {

		my ($message, $panel) = @_;

		my $client = REST::Client->new(
			 host => $Tab::url_prefix
		);

		my %send_message = (
			message => $message
		);

		my $post = JSON::encode_json(\%send_message);
		my $auth_header = encode_base64($Tab::indexcards_user.":".$Tab::indexcards_key);

		$client->POST(
			$Tab::indexcards_url.'/ext/mason/section/'.$panel->id.'/blastPairing',
			$post,
			{
				'Authorization' => "Basic $auth_header",
				'Accept'        => 'application/json',
				'Content-Type'  => 'application/json'
			}
		);

		my $response = eval {
			return JSON::decode_json($client->responseContent());
		};

		my $msg;

		if ($response && $response->{message} ) {
			$msg .= "Blast response ".$response->{message};
		}
	}

</%init>
