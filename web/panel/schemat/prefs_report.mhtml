<%args>
	$panel_id => undef
</%args>
<%init>

	use List::Util 'shuffle';

	my $panel = Tab::Panel->retrieve($panel_id);
	$m->abort unless $panel;

	my $round = $panel->round;

	my @schools = $m->comp(
		"/funclib/event_schools.mas",
		event => $round->event
	);

	my %school_region =
		map {$_->id => $_->region}
		@schools;

	my $prelim_count;

    my $round_event = $round->event;
	my %event_settings = $round_event->all_settings();

	foreach my $round ($round_event->rounds) {
		next if $round->type eq "elim";
		next if $round->type eq "final";
		next if $round->type eq "runoff";
		$prelim_count++;
	}
	my $event_type = $round_event->type;
    my $tourn = $round_event->tourn;
	my $category = $round_event->category;

	my %category_settings = $category->all_settings();

	my $prefs = $category_settings{"prefs"};

	$prefs = "ordinals"
		if $prefs eq "ndt"
		&& $round->type ne "elim"
		&& $round->type ne "final"
		&& $round->type ne "runoff";

	$m->abort unless $prefs;
	$m->abort if $prefs eq "no";

	my $this_round = $round->id;
	my $round_type = $round->type;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $round_start = $round->timeslot->start->set_time_zone($tz);
	my $round_end = $round->timeslot->end->set_time_zone($tz);

	my @jpools = $round->jpools;

	my $flights = $round->flighted;
	$flights = 1 unless $flights;
	$flights = 1 if $event_settings{"flight_rooms_only"};


	my $blind_mode++ if $event_settings{"blind_mode"} && $round->published < 1;

	my %anonymize = $m->comp("/funclib/blind_mode.mas", round => $round)
		if $blind_mode;

	my $num_judges = $round->setting("num_judges");
	$num_judges = 1 unless $num_judges;

	my %this_panel =
		map {$_->id => $_}
		$m->comp("/funclib/panel_judges.mas", panel => $panel);

	my %judge_panel_score;

	# Lots of settings
	my $rounds_per = $category_settings{"rounds_per"};
	my $no_back_to_back = $category_settings{"no_back_to_back"};
	my $judge_randomize = $category_settings{"judge_randomize"};
	my $judge_event_twice = $category_settings{"judge_event_twice"};
	my $allow_school_panels = $category_settings{"allow_school_panels"};

	my $no_first_years = $event_settings{"no_first_years"};
	my $allow_judge_own = $event_settings{"allow_judge_own"};
	my $region_constrain = $event_settings{"region_constrain"};
    my $region_avoid++ if $event_settings{"region_avoid"};

	my $allow_repeat_elims = $event_settings{"allow_repeat_elims"};
	my $allow_repeat_judging = $event_settings{"allow_repeat_judging"};
	my $allow_repeat_prelim_side = $event_settings{"allow_repeat_prelim_side"};

    $region_constrain++ if $round_event->tourn->setting("ncfl");

	my $tab_ratings = $category_settings{"tab_ratings"};

	my $dbh = Tab::DBI->db_Main();

	my $event_ballots_sth = $dbh->prepare("

		select distinct ballot.id, ballot.entry, ballot.judge,
			round.id, round.type, entry.school, ballot.side, panel.bracket, panel.id, entry.code, panel.bye
		from ballot, panel, round, entry, event, school
		where event.category = ?
		and round.event = event.id
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.bye = 0
		and ballot.forfeit = 0
		and panel.bye = 0
		and ballot.entry = entry.id
		and entry.school = school.id
	");

	$event_ballots_sth->execute($round_event->category->id);

	my %entry_side;
	my %entry_code;
	my %entry_school;
	my %entry_region;
	my %school_entries;
	my %region_entries;

	my %judge_ballots;
	my %entry_ballots;

	my @panels;
	my %panel_entries;
	my %panel_bracket;
	my %panel_bye;

	my %ballot_type;
	my %ballot_side;
	my %ballot_entry;
	my %ballot_judge;

	my %judge_rounds;

	while (
		my ($ballot, $entry, $judge, $round, $type, $entry_school, $side, $bracket, $panel, $code, $bye)
		= $event_ballots_sth->fetchrow_array()
	) {

		if ($round == $this_round) {

			push @{$school_entries{$entry_school}}, $entry;
			$entry_school{$entry} = $entry_school;
			$entry_region{$entry} = $school_region{$entry_school};

			push @{$region_entries{$school_region{$entry_school}}}, $entry
				if $school_region{$entry_school} > 0;

			$entry_side{$entry} = $side;
			$entry_code{$entry} = $code;

			push @panels, $panel;
			$panel_bracket{$panel} = $bracket;
			$panel_bye{$panel} = $bye;

			push @{$panel_entries{$panel}}, $entry;

		} else {

			push @{$judge_rounds{$judge}}, $round if $round;
			push @{$judge_ballots{$judge}}, $ballot;
			push @{$entry_ballots{$entry}}, $ballot;

			$ballot_type{$ballot} = $type;
			$ballot_side{$ballot} = $side;
			$ballot_entry{$ballot} = $entry;
			$ballot_judge{$ballot} = $judge;

		}
	}

	$m->abort if $panel_bye{$panel_id};

	my $judge_sth;

	if (@jpools) {

		$judge_sth = $dbh->prepare("
			select distinct judge.id, judge.last, judge.first, judge.school,
				tab_rating.value, diverse.value, concat(judge.obligation+judge.hired) as rounds
			from (judge, jpool_judge, jpool_round)
			left join judge_setting tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left join judge_setting diverse on diverse.judge = judge.id and diverse.tag = 'diverse'
			where judge.active = 1
			and judge.id = jpool_judge.judge
			and jpool_judge.jpool = jpool_round.jpool
			and jpool_round.round = ".$round->id."
			group by judge.id
		");

	} else {

		$judge_sth = $dbh->prepare("
			select distinct judge.id, judge.last, judge.first, judge.school, tab_rating.value,
				diverse.value, concat(judge.obligation+judge.hired) as rounds
			from (judge, event, round)
			left join judge_setting tab_rating on tab_rating.judge = judge.id and tab_rating.tag = 'tab_rating'
			left join judge_setting diverse on diverse.judge = judge.id and diverse.tag = 'diverse'
			where judge.active = 1
			and judge.category = event.category
			and event.id = round.event
			and round.id = ".$round->id."
			group by judge.id
		");

	}

	$judge_sth->execute();

	my @judges;
	my %judge_name;
	my %judge_score;
	my %judge_school;
	my %judge_region;
	my %judge_rating;
	my %judge_diverse;

	my %school_judges;
	my %region_judges;
	my %judge_clashes;
	my %judge_obligation;

	while (my ($id, $last, $first, $school, $rating, $diverse, $rounds) = $judge_sth->fetchrow_array() ) {

		next unless $id;

		push @judges, $id;
		$judge_name{$id} = $last.", ".substr($first, 0, 1);
		$judge_school{$id} = $school;
		$judge_region{$id} = $school_region{$school} if $school_region{$school};
		$judge_rating{$id} = $rating;
		$judge_diverse{$id} = $diverse;
		$judge_obligation{$id} = $rounds;

		push @{$school_judges{$school}}, $id;

		if ($school_entries{$school} && not defined $allow_judge_own) {
			foreach my $entry (@{$school_entries{$school}}) {
				push @{$judge_clashes{$id}}, $entry;
			}
		}

		if ($region_constrain) {
			if ($region_entries{$school_region{$school}} && not defined $allow_judge_own) {
				foreach my $entry (@{$region_entries{$school_region{$school}}}) {
					push @{$judge_clashes{$id}}, $entry;
				}
			}
		}
	}

	unless (@judges) {
		my $err = "No judges were found.  Did you put judges into the judge pools?" if @jpools;
		$err = "No judges were available." unless @jpools;
		$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&disp=1&err=$err");
	}

	my $strikes_sth = $dbh->prepare("
		select distinct strike.id, strike.judge, strike.type, strike.event, strike.entry,
			strike.school, strike.region, strike.start, strike.end
		from strike
		where strike.tourn = ".$tourn->id."
	");

	$strikes_sth->execute();

	my %judge_out;


	while (my ($id, $judge, $type, $event, $entry, $school, $region, $start, $end)
		= $strikes_sth->fetchrow_array() ) {


		if ($type eq "conflict" || $type eq "entry") {

			if ($school) {

				push @{$judge_clashes{$judge}}, @{$school_entries{$school}}
					if $school_entries{$school};

				push @{$judge_clashes{$judge}}, @{$region_entries{$school_region{$school}}}
					if $region_entries{$school_region{$school}};


			} else {
				push @{$judge_clashes{$judge}}, $entry;

			}
		}

		if ($type eq "elim" || $type eq "event") {
			next if ($round_type eq "elim" || $round_type eq "final" || $round_type eq "runoff" ) && $type eq "elim";
			next unless $event == $round_event->id;
			$judge_out{$judge}++;
		}

		if ($type eq "hybrid") {
			foreach my $school_judge (@{$school_judges{$school}}) {
				push @{$judge_clashes{$school_judge}}, $entry;
			}
		}


		if ($type eq "region") {
			foreach my $region_school (@schools) {
				next unless $school_region{$region_school} == $region;
				push @{$judge_clashes{$judge}}, @{$school_entries{$region_school}};
			}
		}


		if ($type eq "school") {
			push @{$judge_clashes{$judge}}, @{$school_entries{$school}} if $school_entries{$school};

		}

		if ($type eq "time") {

			my $start_dt;
			my $end_dt;

			eval {
				$start_dt = DateTime::Format::MySQL->parse_datetime($start);
				$end_dt = DateTime::Format::MySQL->parse_datetime($end);

				$start_dt->set_time_zone("UTC");
				$end_dt->set_time_zone("UTC");

				$start_dt->set_time_zone($tz);
				$end_dt->set_time_zone($tz);
			};

			$judge_out{$judge}++  if ($end_dt && $start_dt && $round_start <= $end_dt && $round_end >= $start_dt);
		}


	}

	my $rounds_missed_sth = $dbh->prepare("
		select distinct judge.id, count(round.id)
		from judge, round, timeslot, strike, event
		where judge.id = strike.judge
		and judge.category = event.category
		and event.id = ?
		and round.event = event.id
		and strike.type = 'time'
		and strike.start < timeslot.end
		and strike.end > timeslot.start
		and timeslot.id = round.timeslot
		group by judge.id
	");

	my %judge_roundstruck = ($round_event->id);

	$rounds_missed_sth->execute();

	while (my ($judge, $rounds_struck) = $rounds_missed_sth->fetchrow_array() ) {
		$judge_roundstruck{$judge} = $rounds_struck;
	}

	my $busy_sth = $dbh->prepare("
		select distinct judge.id
		from ballot, panel, round, timeslot, timeslot mytime, round myround, judge
		where myround.id = ?
		and myround.timeslot = mytime.id
		and mytime.start < timeslot.end
		and mytime.end > timeslot.start
		and timeslot.id = round.timeslot
		and round.id = panel.round
		and panel.id = ballot.panel
		and ballot.judge = judge.id
		and judge.category = ?
	");

	$busy_sth->execute($round->id, $category->id);

	while (my ($judge) = $busy_sth->fetchrow_array() ) {
		$judge_out{$judge}++;
	}

	my %tier_value;
	my %tier_strike;

	my $tiers;

	if ($prefs ne "ordinals") {
		$tiers++;
		foreach my $tier (sort {$a->name cmp $b->name} $category->rating_tiers(type => "mpj")) {
			$tier_value{$tier->id} = $tier->name;
			$tier_strike{$tier->id}++ if $tier->strike || $tier->conflict;
		}
	}

	my $ratings_sth = $dbh->prepare("
		select distinct rating.id, rating.judge, rating.entry, rating.rating_tier, rating.percentile
			from rating, ballot, panel
		where panel.round = ?
			and ballot.panel = panel.id
			and panel.bye = 0
			and ballot.bye = 0
			and ballot.entry = rating.entry
		group by rating.entry, rating.judge
	");

	$ratings_sth->execute($round->id);

	my %mjp;

	while (my ($id, $judge, $entry, $tier, $percentile) = $ratings_sth->fetchrow_array() ) {
		next unless ($tier || $percentile);
		next if $mjp{$judge}{$entry};
		if ($prefs eq "ordinals") {
			$mjp{$judge}{$entry} = $percentile if $percentile > 0;
		} else {
			$mjp{$judge}{$entry} = $tier_value{$tier} if $tier > 0;
			push @{$judge_clashes{$judge}}, $entry if $tier && $tier_strike{$tier};
		}
	}

	my %panel_seen = ();

	@panels = grep { ! $panel_seen{$_} ++ } @panels;
	@panels = sort {$panel_bracket{$b} <=> $panel_bracket{$a}} @panels;

	my %judge_avoid;
	my %judge_entry_clash;

    my $judge_use_ref = $m->comp("/funclib/judge_use.mas", round_id => $round->id);
    my %judge_use = %{$judge_use_ref};

	my $round_burn_avoid = $category_settings{"round_burn_avoid"};
	my $mutuality = $category_settings{"mutuality"};
	my $panel_mutuality = $category_settings{"panel_mutuality"};
	my $preference = $category_settings{"preference"};
	my $default_mjp = $category_settings{"default_mjp"};
	my $diversity = $category_settings{"diverse_judge_weight"};
	my $suckage = $category_settings{"sucktastic_judge_weight"};
	my $prefer_hireds = $category_settings{"mjp_prefer_hireds"};

	$diversity        = 1 if not defined $diversity;
	$suckage          = 3 if not defined $suckage;
	$mutuality        = 25 if not defined $mutuality;
	$panel_mutuality  = 25 if not defined $panel_mutuality;
	$preference       = 10 if not defined $preference;
	$default_mjp      = 1 if not defined $default_mjp;
	$round_burn_avoid = 15 if not defined $round_burn_avoid;
	$prefer_hireds    = 10 if not defined $prefer_hireds;

	# I will get you for this Bruschke
	$mutuality = 0 if $mutuality == -1;
	$panel_mutuality = 0 if $panel_mutuality == -1;
	$diversity = 0 if $diversity == -1;
	$suckage = 0 if $suckage == -1;
	$preference = 0 if $preference == -1;
	$default_mjp = 0 if $default_mjp == -1;
	$round_burn_avoid = 0 if $round_burn_avoid == -1;
	$prefer_hireds = 0 if $prefer_hireds == -1;

	my %use_priority;
	my %judge_roundcount;

	my %judge_prefs = $m->comp("/funclib/judges_by_pref.mas", category => $category);

	foreach my $judge (@judges) {

		my %seen = ();
		@{$judge_rounds{$judge}} = grep { ! $seen{$_}++ } @{$judge_rounds{$judge}};

		my $num_rounds = scalar @{$judge_rounds{$judge}};

		$judge_score{$judge} += scalar @{$judge_clashes{$judge}} if $judge_clashes{$judge};

		if ($rounds_per && $round_type ne "elim" && $round_type ne "final" && $round_type ne "runoff") {

			$judge_out{$judge}++
				if $num_rounds >= $judge_obligation{$judge};

			my $remaining_prelims = $prelim_count + 1 - $round->name;

            my $rounds_left = $judge_use{$judge}{"percentage"} * .01 * $judge_use{$judge}{'left'};

            my $round_diff = $remaining_prelims - $rounds_left;

            $judge_score{$judge} += $round_diff ** $round_burn_avoid
				if $round_diff > 0;

            $use_priority{$judge}{"burn_avoid"} += $round_diff ** $round_burn_avoid
				if $round_diff > 0;

            $use_priority{$judge}{"rounds_left"} += $rounds_left;

            $judge_roundcount{$judge} = $num_rounds;


		} else {

			my $round_factor = $num_rounds;
			$round_factor -= $judge_roundstruck{$judge};

			$round_factor = $round_factor * $round_burn_avoid;

			$use_priority{$judge}{"has_judged"} = $num_rounds;
			$judge_roundcount{$judge} = $num_rounds;

		}

		$use_priority{$judge}{"hired"} -= $prefer_hireds
			if $judge_school{$judge} < 1;

		$use_priority{$judge}{"diversity"} -= $judge_diverse{$judge} * $diversity
			if $diversity;

		$use_priority{$judge}{"pref_avg"} -=
			($judge_prefs{$judge}{"avg"} - ($judge_prefs{$judge}{"stddev"}/3))
			* $suckage
			if $suckage;

		next if $judge_out{$judge} > 0 && not defined $this_panel{$judge};

		if ($judge_ballots{$judge}) {

			my %used = ();

			foreach my $ballot (
				sort { $entry_code{$ballot_entry{$a}} cmp $entry_code{$ballot_entry{$b}}}
				@{$judge_ballots{$judge}}
			) {

				my $entry = $ballot_entry{$ballot};

				next if $allow_repeat_elims
					&& (
						$round_type eq "elim"
						|| $round_type eq "final"
						|| $round_type eq "runoff"
						|| $ballot_type{$ballot} eq "elim"
						|| $ballot_type{$ballot} eq "final"
						|| $ballot_type{$ballot} eq "runoff"
					) ;

				push @{$judge_avoid{$judge}}, $entry;

				next if $allow_repeat_judging;
				next if $allow_repeat_prelim_side && $ballot_side{$ballot} != $entry_side{$entry};
				next if $used{$entry}++;

				push @{$judge_clashes{$judge}}, $entry;
			}
		}

		foreach my $clash (@{$judge_clashes{$judge}}) {
			$judge_entry_clash{$judge}{$clash}++;
		}

	}

	my $switch;

	my %default_settings = $m->comp(
		"/funclib/default_rating_settings.mas",
		type => $round_event->type
	);

	my $bracket_order = $round->setting("tab_rating_priority");
	$bracket_order = $default_settings{$round->name} unless $bracket_order;

	$bracket_order =~ s/\s*//g;
	my @orders = split(/\,/, $bracket_order) unless $round_type eq "elim" || $round_type eq "final" || $round_type eq "runoff";

	my %bracket_score;
	my $order_multiplier;

	my $last_order = 0;
	my $shuffle_post;

	undef @orders if $round->type eq "prelim";

	unless (@orders) {
		foreach (1 .. $num_judges) {
			push @orders, 0;
			$shuffle_post++;
		}
	}

	my $loss_threshold = $event_settings{"break_point"}
		if $event_settings{"break_point"};

	my $max_pref = $event_settings{"max_pref"}
		if $event_settings{"max_pref"};

	my $max_nobreak_pref = $event_settings{"max_nobreak_pref"}
		if $event_settings{"max_nobreak_pref"};

	my $bracket_cannot_clear = $round->name - $loss_threshold - 1
		if $loss_threshold > 0;

	foreach my $order (reverse @orders) {

		$order_multiplier++;

		foreach my $panel (@panels) {
			next unless $panel_bracket{$panel} == $order;
			$bracket_score{$panel} = $order_multiplier;
		}

		$last_order = $order;
	}

	my $dont_care++
		if $bracket_cannot_clear
		&& $panel_bracket{$panel} <= $bracket_cannot_clear;

	JUDGE:
	foreach my $judge (@judges) {

		my $debug;
		my $score = 0;

		next JUDGE
			if $judge_out{$judge}
			&& not defined $this_panel{$judge};

		my $diff;
		my $mjp_first;
		my $rating;
		my %done;

		foreach my $entry (@{$panel_entries{$panel}}) {

			next if $done{$entry}++;

			$score += 50000000
				if $judge_entry_clash{$judge}{$entry};

			$judge_panel_score{$judge}{"clash"} = 500000000
				if $judge_entry_clash{$judge}{$entry};

			$score += 50000000
				if $judge_avoid{$entry};

			$judge_panel_score{$judge}{"avoid"} = 50000000 if $judge_avoid{$entry};

			$score += 50000000
				if $judge_avoid{$entry}
				&& $prefs eq "ordinals";

			$judge_panel_score{$judge}{"avoid"} = 50000000
				if $judge_avoid{$entry}
				&& $prefs eq "ordinals";

			my $mjp_rating = $mjp{$judge}{$entry};
			$mjp_rating = $default_mjp unless $mjp_rating;

			if ($dont_care && $max_nobreak_pref) {

				$score += 50000000 if $mjp_rating > $max_nobreak_pref;

				$judge_panel_score{$judge}{"maxpref"} = 50000000
					if $mjp_rating > $max_nobreak_pref;

			} elsif ($max_pref) {

				$score += 50000000 if $mjp_rating > $max_pref;
				$judge_panel_score{$judge}{"maxpref"} = 50000000
					if $mjp_rating > $max_pref;
			}

			if ($region_avoid) {
				$score += 100 if $entry_region{$entry} == $judge_region{$judge};
				$judge_panel_score{$judge}{"region"} = 100
					if $entry_region{$entry} == $judge_region{$judge};
			}

			if ($prefs && $prefs ne "none") {

				if ($mjp_first) {
					$diff = abs($mjp_first - $mjp_rating)
						if $mjp_first && $mjp_rating;
				} else {
					$mjp_first = $mjp_rating unless $mjp_first;
				}

				unless ($dont_care) {
					$score += $mjp_rating * $preference;
					$score += 2 * $preference unless $mjp_rating;

					$judge_panel_score{$judge}{"preference"} += $mjp_rating * $preference;
					$judge_panel_score{$judge}{"preference_raw"} += $mjp_rating;
				}

				$judge_rating{$judge}{$entry} = sprintf("%.2f", $mjp_rating) if $prefs eq "ordinals";
				$judge_rating{$judge}{$entry} = $mjp_rating if $prefs ne "ordinals";
				$judge_rating{$judge}{$entry} = "x" if not defined $mjp_rating;
			}
		}

		$judge_panel_score{$judge}{"use_priority"} += $use_priority{$judge}{"pref_avg"};
		$judge_panel_score{$judge}{"use_priority"} += $use_priority{$judge}{"diversity"};
		$judge_panel_score{$judge}{"use_priority"} += $use_priority{$judge}{"hired"};
		$judge_panel_score{$judge}{"use_priority"} += $use_priority{$judge}{"burn_avoid"};
		$judge_panel_score{$judge}{"use_priority"} += $use_priority{$judge}{"has_judged"};

		$judge_panel_score{$judge}{"mutuality"} += $diff * $mutuality;
		$judge_panel_score{$judge}{"mutuality_raw"} += $diff;

		$score += $judge_panel_score{$judge}{"use_priority"};
		$score += $diff * $mutuality if $prefs && $prefs ne "none";
		$score += $diff if $prefs && $prefs ne "none" &! $dont_care;

		if ($tab_ratings &! $dont_care) {
			$score += $judge_rating{$judge} * $preference;
			$judge_panel_score{$judge}{"tab_rating"}  += $judge_rating{$judge} * $preference;
		}

		$judge_panel_score{$judge}{"bracket_weight"} = $bracket_score{$panel_id};

		$score = $score * $bracket_score{$panel_id}
			if $bracket_score{$panel_id}
			&& $round_type ne "elim" &! $dont_care;

		$judge_panel_score{$judge}{"bracket_weight"} = $bracket_score{$panel_id};

		$judge_panel_score{$judge}{$panel} = $score;

		$judge_panel_score{$judge}{"total"} = $score;

	}

	my @entries = $m->comp("/funclib/panel_entries.mas", panel => $panel);

	my $aff;
	my $neg;

	foreach my $entry (@entries) {
		$aff = $entry if $entry->side == 1;
		$neg = $entry if $entry->side == 2;
	}

</%init>

	<div class="blankfull">

		<div class="full marbottommore">

			<span class="twothirds nospace">

%				if ($blind_mode) {

					<h5><% $anonymize{"entry"}{$aff->id} %> vs <% $anonymize{"entry"}{$neg->id} %></h5>

%				} else {
					<h5>
					<% $aff ? $aff->code : "" %>
						vs
					<% $neg ? $neg->code : "" %>
					Prefs
					</h5>
%				}
			</span>

			<span class="third rightalign nospace">

				<a
					href="panel_view.mhtml?panel_id=<% $panel->id %>"
					class="bluetext buttonwhite marrightmore"
				>
					Return to Debate
				</a>

				<a
					class  = "greentext buttonwhite marleft"
					target = "_blank"
					href   = "/setup/judges/tabbing.mhtml?category_id=<% $panel->round->event->category->id %>"
				>
					Adjust Weights
				</a>
			</span>
		</div>

		<div class="full nospace marbottommore row">

			<span class="seventh centeralign">
				Mutuality
				<% $mutuality  %>
			</span>

			<span class="seventh centeralign">
				Panel Mut.
				<% $panel_mutuality  %>
			</span>

			<span class="seventh centeralign">
				Prefer
				<% $preference %>
			</span>

			<span class="seventh centeralign">
				Diversity
				<% $diversity %>
			</span>

			<span class="seventh centeralign">
				AvgPref
				<% $suckage %>
			</span>

			<span class="seventh centeralign">
				Burn Avoid
				<% $round_burn_avoid %>
			</span>

			<span class="seventh centeralign">
				Pref Hires
				<% $prefer_hireds %>
			</span>

		</div>

		<& /funclib/tablesorter.mas, table => "sortable" &>

		<table id="sortable">

			<thead>

				<tr class="yellowrow smallish">

					<th>
						Judge
					</th>

					<th>
						Prefs
					</th>

					<th title="Mutuality difference times multiplier" >
						Mut
					</th>

					<th title="Raw Mutuality difference" >
						Raw
					</th>

					<th title="Sum of preference scores times multiplier" >
						Prf
					</th>

					<th title="Raw preference scores" >

						Raw
					</th>

					<th title="Average pref of the judge" >
						AvgPrf
					</th>

					<th title="Rounds left for the judge's obligation">
						Burn
					</th>

					<th title="# of Rounds the judge has judged">
						HasJd
					</th>

					<th title="Diverse judge bonus score" >
						Div
					</th>

					<th title="Hired judge bonus score" >
						Hire
					</th>

					<th>
						Tot
					</th>
				</tr>

			</thead>

			<tbody>

<%perl>

			@judges =
				sort {$judge_panel_score{$a}{"total"} <=> $judge_panel_score{$b}{"total"}}
				@judges;

			foreach my $judge (@judges) {

				unless ($this_panel{$judge}) {
					next if $judge_out{$judge} && not defined $this_panel{$judge};
					next if $judge_panel_score{$judge}{"clash"};
					next if $judge_panel_score{$judge}{"avoid"};
				}

</%perl>
				<tr class="smallish <% $this_panel{$judge} ? 'libl' : "" %> ">

					<td>
%						if ($blind_mode) {
							<% $anonymize{"judge"}{$judge} %>
%						} else {
							<% $judge_name{$judge} %>
%						}
					</td>

					<td>
						<% $judge_rating{$judge} ? $judge_rating{$judge}{$aff} : "-" %> - <%
						$judge_rating{$judge}{$neg} ? $judge_rating{$judge}{$neg} : "-" %>
					</td>

					<td>
						<% sprintf( "%.2f",  $judge_panel_score{$judge}{"mutuality"} ) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $judge_panel_score{$judge}{"mutuality_raw"}) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $judge_panel_score{$judge}{"preference"} + $judge_panel_score{$judge}{"maxpref"}) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $judge_panel_score{$judge}{"preference_raw"}) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $use_priority{$judge}{"pref_avg"} ) %>
					</td>

					<td>
						<% $use_priority{$judge}{"burn_avoid"} ? $use_priority{$judge}{"burn_avoid"} : 0 %>
					</td>

					<td>
						<% sprintf( "%.2f",  $use_priority{$judge}{"has_judged"} ) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $use_priority{$judge}{"diversity"} ) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $use_priority{$judge}{"hired"} ) %>
					</td>

					<td>
						<% sprintf( "%.2f",  $judge_panel_score{$judge}{"total"}) %>
					</td>

				</tr>

%			}

			</tbody>

		</table>

	</div>


