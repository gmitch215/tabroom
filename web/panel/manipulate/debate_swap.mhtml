<%args>
	$person
	$tourn
	$panel_id => undef
	$entry_id => undef
	$side     => undef
</%args>
<%init>

	my $origin_entry = Tab::Entry->retrieve($entry_id) if $entry_id;
	my $target_panel = Tab::Panel->retrieve($panel_id) if $panel_id;

	unless ($target_panel && $origin_entry) {
		$m->print("No debate for '.$panel_id.' or entry for '.$entry_id.' found.  Please refresh this page and start again");
		$m->abort;
	}
	unless ($side > 0) {
		$m->print("No debate side sent: '.$side.'");
		$m->abort;
	}

	my $round = $target_panel->round;

	Tab::Panel->set_sql( origin => "
		select panel.*
			from panel, ballot
			where panel.round = ?
			and panel.id = ballot.panel
			and ballot.entry = ?
	");

	Tab::Entry->set_sql( target => "
		select entry.*
			from entry, ballot
			where ballot.panel = ?
			and ballot.side = ?
			and ballot.entry = entry.id
	");

	my $origin_panel = Tab::Panel->search_origin($round->id, $origin_entry->id)->first;
	my $target_entry = Tab::Entry->search_target($target_panel->id, $side)->first;

	if ($origin_panel == $target_panel && $origin_entry == $target_entry) {
		my $msg = "No move made";
		$m->redirect("debate_round_edit.mhtml?round_id=".$origin_panel->round->id."&entry_id=$entry_id&msg=$msg");
	}

	if ($origin_panel == $target_panel) {

		my $tb = $origin_panel->ballots( entry => $origin_entry )->first;
		my $target_side = $tb->side;
		$target_side = 1 unless $target_side;

		my $description;
		if ($target_entry && $origin_entry) {
			$description = $target_entry->code." and ".$origin_entry->code." swapped sides";
		} elsif ($origin_entry) {
			$description = $origin_entry->code." swapped sides";
		}

		$m->comp("/funclib/swap_sides.mas", panel => $origin_panel, person => $person);

		my $now = DateTime->now();

		$m->comp("/funclib/log.mas",
			type        => 'tabbing',
			event       => $origin_entry->event->id,
			entry       => $origin_entry->id,
			person      => $person->id,
			panel       => $origin_panel,
			tourn       => $tourn->id,
			description => $description
		);

		my $msg = $description;
		$m->redirect("debate_round_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");
	}

	my $origin_side;

	Tab::Score->set_sql( wipe_scores => "
		delete score.*
		from score, ballot
		where score.ballot = ballot.id
		and ballot.entry = ?
		and ballot.panel = ?
	");

	Tab::Ballot->set_sql( swap => "
		update ballot set entry = ?
			where panel = ?
			and entry = ?
	");

	my $description;

	if ($origin_panel && $origin_entry && $target_entry) {

		unless (Tab::Ballot->search( entry => $target_entry->id, panel => $origin_panel->id)) {
			Tab::Score->sql_wipe_scores->execute($origin_entry->id, $origin_panel->id);
			Tab::Ballot->sql_swap->execute($target_entry->id, $origin_panel->id, $origin_entry->id);
			$description .= "Moved ".$target_entry->code." to ".$origin_panel->letter;
			my $ob = $origin_panel->ballots( entry => $target_entry )->first;
			$origin_side = $ob->side;
		}

		my $to_description = "Moved ".$target_entry->code." to section ".$origin_panel->letter;

		$m->comp("/funclib/log.mas",
			type        => 'move',
			event       => $target_entry->event->id,
			entry       => $target_entry->id,
			panel       => $origin_panel->id,
			person      => $person->id,
			tourn       => $tourn->id,
			description => $to_description
		);
	}

	if ($target_panel && $target_entry && $origin_entry) {

		Tab::Score->sql_wipe_scores->execute($target_entry, $target_panel);
		Tab::Ballot->sql_swap->execute($origin_entry, $target_panel, $target_entry);

		my $to_description = "Moved ".$origin_entry->code." to section ".$target_panel->letter;

		$m->comp("/funclib/log.mas",
			type        => 'move',
			event       => $origin_entry->event->id,
			entry       => $origin_entry->id,
			panel       => $target_panel->id,
			person      => $person->id,
			tourn       => $tourn->id,
			description => $to_description
		);


	} elsif ($target_panel && $origin_entry) {

		my $judge_done;

		foreach my $judge (
			$m->comp("/funclib/panel_judges.mas",
				panel => $target_panel
			)
		) {

			$judge_done++;

			my $didit = eval {
				return Tab::Ballot->create({
					entry => $origin_entry->id,
					panel => $target_panel->id,
					judge => $judge->id,
					side  => $side,
					audit => 0
				});
			};

			unless ($didit) {
				$m->comp("/funclib/abort.mas", message => "Could not create ballot for ".$origin_entry->id." judge ".$judge->last." side $side.  Duplicate possible; refresh the swap screen before continuing");
			}

		}

		unless ($judge_done) {

			unless (
				Tab::Ballot->search(
					entry => $origin_entry->id,
					panel => $target_panel->id,
				)
			) {
				Tab::Ballot->create({
					entry => $origin_entry->id,
					panel => $target_panel->id,
					side  => $side,
					audit => 0
				});
			}
		}

		if ($origin_panel) {
			foreach my $old_ballot ($origin_panel->ballots(entry => $origin_entry->id)) {
				$old_ballot->delete();
			}
		}

		my $to_description = "Added ".$origin_entry->code." to section ".$target_panel->letter;

		$m->comp("/funclib/log.mas",
			type        => 'move',
			event       => $origin_entry->event->id,
			entry       => $origin_entry->id,
			panel       => $target_panel->id,
			person      => $person->id,
			tourn       => $tourn->id,
			description => $to_description
		);
	}

	if ($origin_entry && $target_panel &&  (not defined $origin_panel)) {

		my $judge_done;

		foreach my $judge ($m->comp("/funclib/panel_judges.mas", panel => $target_panel)) {

			$judge_done++;

			unless (Tab::Ballot->search(
					panel => $target_panel->id,
					entry => $origin_entry->id,
					judge => $judge->id,
				)
			) {
				Tab::Ballot->create({
					panel => $target_panel->id,
					judge => $judge->id,
					entry => $origin_entry->id,
					side  => $side,
					audit => 0
				});
			}
		}

		unless ($judge_done) {

			unless (Tab::Ballot->search(
					panel => $target_panel->id,
					entry => $origin_entry->id,
				)
			) {
				Tab::Ballot->create({
					panel => $target_panel->id,
					entry => $origin_entry->id,
					side  => $side,
					audit => 0
				});
			}
		}

		my $to_description = "Added ".$origin_entry->code." to section ".$target_panel->letter;

		$m->comp("/funclib/log.mas",
			type        => 'move',
			event       => $origin_entry->event->id,
			entry       => $origin_entry->id,
			panel       => $target_panel->id,
			person      => $person->id,
			tourn       => $tourn->id,
			description => $to_description
		);

	}

	if ($origin_panel) {
		unless ($origin_panel->ballots()) {
			$origin_panel->delete();
		}
	}

	my $now = DateTime->now();

	my $msg = $description;
	$m->redirect("debate_round_edit.mhtml?round_id=".$round->id."&entry_id=$entry_id&msg=$msg");


</%init>
