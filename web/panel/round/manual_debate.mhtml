<%args>
	$person
	$person_settings
	$tourn
	$tourn_settings
	$round_id => undef
	$dbh
</%args>
<%init>

	my $round = Tab::Round->retrieve($round_id);

	unless ($round) {
		$m->comp("/funclib/abort.mas", message => "No round found for ID $round_id");
	}

	my $event = $round->event;
	$m->abort unless $event->tourn == $tourn->id;

	my %event_settings = $event->all_settings;

	my $aff_string = $event_settings{"aff_string"} || "Aff";
	my $neg_string = $event_settings{"neg_string"} || "Neg";

	my $sidelocks++;
	undef $sidelocks if $event_settings{"no_side_constraints"};

	my @panels = sort $round->panels;
	my @round_entries = $m->comp("/funclib/round_entries.mas", round => $round);

    my %panel_entries = ();
	my %school_info = ();
	my %in_debate = ();

	foreach my $entry (@round_entries) {

		push @{$panel_entries{$entry->panelid}{$entry->side}}, $entry;

		$in_debate{$entry->id} = $entry->panelid;

		unless ($school_info{$entry->schoolid}) {
			$school_info{$entry->schoolid}{"name"} = $entry->schoolname;
			$school_info{$entry->schoolid}{"code"} = $entry->schoolcode;
		}
    }

	my $sth = $dbh->prepare("
		select
			entry.id, entry.code,
				school.id, school.code, school.name,
				district.id, district.code, district.name,
				region.id, region.code, region.name

		from (entry)
			left join school on entry.school = school.id
			left join district on school.district = district.id
			left join region on school.region = region.id


		where entry.active = 1
		and entry.event = ?
		and not exists (
			select ballot.id
			from ballot, panel
			where panel.round    = ?
				and panel.id     = ballot.panel
				and ballot.entry = entry.id
		)
	");

	$sth->execute($event->id, $round->id);
	my %unassigned;

	while (
		my (
			$entry_id, $entry_code,
				$school_id, $school_code, $school_name,
				$district_id, $district_code, $district_name,
				$region_id, $region_code, $region_name
		) = $sth->fetchrow_array()
	) {

		$unassigned{$entry_id}{'code'} = $entry_code;

		$unassigned{$entry_id}{'school'} = $school_id;
		$unassigned{$entry_id}{'school_code'} = $school_code;
		$unassigned{$entry_id}{'school_name'} = $school_name;

		$unassigned{$entry_id}{'region'} = $region_id;
		$unassigned{$entry_id}{'region_code'} = $region_code;
		$unassigned{$entry_id}{'region_name'} = $region_name;

		$unassigned{$entry_id}{'district'} = $district_id;
		$unassigned{$entry_id}{'district_code'} = $district_code;
		$unassigned{$entry_id}{'district_name'} = $district_name;
	}

	my $judge_sth = $dbh->prepare('
		select
			judge.id, judge.code, judge.first, judge.middle, judge.last, panel.id panel, ballot.chair,
			school.name school_name, school.code school_code,
			score.id
		from (judge, ballot, panel)
			left join school on judge.school = school.id
			left join score on score.ballot = ballot.id
		where 1=1
			and panel.round = ?
			and panel.id = ballot.panel
			and ballot.judge = judge.id
			and panel.bye != 1
		group by judge.id
		order by ballot.chair DESC, judge.last, judge.first
	');

	$judge_sth->execute($round->id);
	my $judge_refs = $judge_sth->fetchall_hash();

	my %panel_judges;

	foreach my $ref (@{$judge_refs}) {
		push @{$panel_judges{$ref->{panel}}}, $ref;
	}

	my %bracket;

	if ($round->type eq "highhigh" || $round->type eq "highlow") {
		my $previous_round = $event->rounds(name => $round->name - 1)->first;
		%bracket = $m->comp("/funclib/entry_wins.mas", round => $previous_round);
	}

	my %cross_entries = $m->comp(
		"/funclib/event_doubled.mas",
		round => $round
	);

	my %hit_before = $m->comp(
		"/funclib/event_entry_hits.mas",
		round => $round
	);

	my $seed = $m->comp(
		"/funclib/event_entry_settings.mas",
		event => $event,
		hash  => 1,
		tag   => "pairing_seed"
	);

	my $show_strength++ if $round->name > 2;

	undef $show_strength if $round->type eq "final";

</%init>

	<div class="menu sticky">

		<div class="sidenote">
			<h4>Return</h4>

			<a
				class="full blue"
				href="/panel/schemat/show.mhtml?round_id=<% $round->id %>"
			>Return to <% $round->realname %> Schematic</a>

		</div>

		<div class="sidenote">

			<h4>Add Sections</h4>

			<div class="row padless">

				<form action="create_panels.mhtml" method="post">

				<input
					type  = "hidden"
					name  = "round_id"
					value = "<% $round->id %>"
				>

				<span class="smallish quarter padless">
					Number
				</span>

				<span class="half padless">
					<input
						class = "notfirst thin"
						type  = "number"
						size  = "3"
						min   = "0"
						max   = "999"
						name  = "number"
					>
				</span>

				<span class="smallish padless">
					<input
						type  = "submit"
						value = "Go"
						class = "notfirst thin"
					>
					</form>
				</span>
			</div>

			<h4>Not Assigned</h4>

			<span
				id      = "notAssigned"
				panel   = "notAssigned"
				side    = "0"
				class   = "marno full centeralign bordergrey droppable odd"
			>

%				foreach my $entry_id (sort keys %unassigned) {

%					my %side_count;

					<span
						class="
							ninetenths leftalign marno entries draggable max
							entry_school_<% $unassigned{$entry_id}{"school"} %>
%							if ($tourn_settings->{"nsda_nats"}) {
								entry_state_<% $unassigned{$entry_id}{region} %>
%							}
							"
								id        = "<% $entry_id %>"
								school    = "<% $unassigned{$entry_id}{school} %>"
								district  = "<% $unassigned{$entry_id}{district_code} %>"
								state     = "<% $unassigned{$entry_id}{region} %>"
							>

								<span class="marno full centeralign codes biggish"
								>
									<% $unassigned{$entry_id}{code} %>
								</span>

								<span
									class="full buttonhover redtext schools hidden"
								>
									<% $unassigned{$entry_id}{school_code} %>
								</span>

%								if ($tourn_settings->{"nsda_nats"}) {
									<span
										class="full buttonhover orangetext states hidden state_<% $unassigned{$entry_id}{region} %>"
									>
										<% $unassigned{$entry_id}{region_code} %>
									</span>
%								}

								<span class="full buttonhover bluetext hits hidden">
<%perl>
									foreach my $hit (sort keys %{$hit_before{$entry_id}}) {
										next unless $in_debate{$hit};
										next unless $hit_before{$entry_id}{$hit}{"code"};
</%perl>
										<span class="full martop marbottom nospace biggish">
											<% $hit_before{$entry_id}{$hit}{"code"} %> -
											<% $hit_before{$entry_id}{$hit}{"count"} %>x
										</span>
%									}

								</span>

%								foreach my $hit (sort keys %{$hit_before{$entry_id}}) {
%									next unless $in_debate{$hit};
									<span class="full buttonhover hitcounter hit_<% $hit %> hidden">
										<% $hit_before{$entry_id}{$hit}{"count"} %>x
<%perl>
											$m->print("( Rd");
											foreach my $round (sort keys %{$hit_before{$entry_id}{$hit}{rounds}}) {
												$m->print(" ".$round);
											}
											$m->print(")");
</%perl>
									</span>
%								}

%								if ($show_strength) {
									<span
										class = "full buttonhover bracket orangetext hidden"
										entry = "<% $entry_id %>"
										id    = "<% $bracket{$entry_id} %>"
									>
										<% $bracket{$entry_id} %>
									</span>
%								}

%								if ($event_settings{'seed_presets'}) {
									<span
										class = "full buttonhover seed orangetext hidden"
										entry = "<% $entry_id %>"
										id    = "<% $seed->{$entry_id} %>"
									>
										<% $seed->{$entry_id} %>
									</span>
%								}

%								if ($sidelocks) {

									<span class = "full buttonhover sides hidden" >
<%perl>

										foreach my $round_key (
											sort {$a <=> $b} keys %{$hit_before{$entry_id}{'sides'}}
										) {

											next if $round_key == $round->name;

											next if (
												$tourn_settings->{nsda_nats}
												&& $round->type eq "elim"
												&& $hit_before{$entry_id}{"side_types"}{$round_key} ne "elim"
											);

											my $side_string;

											if ($hit_before{$entry_id}{"sides"}{$round_key} == 1) {
												$side_string .= "R".$round_key." A";
												$side_count{$entry_id}{"A"}++;
											}

											if ($hit_before{$entry_id}{"sides"}{$round_key} == 2) {
												$side_string .= "R".$round_key." N";
												$side_count{$entry_id}{"N"}++;
											}
</%perl>
											<span class="quarter marno">
												<% $side_string %>
											</span>
%										}
									</span>
%								}

%								unless ($tourn_settings->{"nsda_nats"}) {
									<span class="full buttonhover crosses hidden" >

%									foreach my $other (keys %{$cross_entries{$entry_id}}) {
%										next unless $cross_entries{$entry_id}{$other};
										<span class="full nospace">
											<% $cross_entries{$entry_id}{$other}{"event"} %>
										</span>
%									}
									</span>
%								}
							</span>
%					}
			</span>
		</div>

	</div>

	<div class="main">

	<script>

		$(document).ready( function() {
%			foreach my $panel (@panels) {
				averageStrength('<% $panel->id %>');
%			}
		});

		function yourFuneral() {
			console.log(`Okay, it's your funeral`);
			$("#your_funeral").addClass('hidden');
		}

		function averageStrength(panelID) {

			var total = 0,
			counter = 0,
			average = 0,
			already = {};

			$("#panel_"+panelID).find(".strength").each(function(index) {

				var strengthScore = parseInt(this.id);
				var entryID = $(this).attr("entry");

				if (!(entryID in already)) {
					total = total + strengthScore;
					counter++;
					already[entryID]++;
				}
			});

			if (counter) {
				average = (total / counter);
			}

			$("#average_"+panelID).html(average.toFixed(2));
		}

		function toggleShow(elementType) {
			$("#"+elementType).toggleClass("invert");
			$("."+elementType).toggleClass("hidden");
		}

		function hideColor (colorToggle) {
			$(".entries").removeClass(colorToggle);
			$(".schooltoggle").removeClass('invert');
			$(".key_"+colorToggle).addClass('hidden');
		}

		function toggleColor (buttonID, keyID, clashType) {
			$("#"+buttonID).toggleClass("invert");
			$("."+buttonID).toggleClass("hidden");
			$(`#${buttonID}_error`).toggleClass("hidden");
			$("."+clashType+"_"+keyID).toggleClass("hidden");
		};

        $(function() {

            $( ".droppable" ).droppable({

                hoverClass       : "ltyellow",
                accept           : ":not(.ui-sortable-helper)",
                disableSelection : "true",

                drop: function( event, ui) {

					const originPanel = this;

					console.log(originPanel);

					$.post("move_debate.mhtml",{
						entry_id     : ui.draggable.attr("id"),
						side         : $(this).attr("side"),
						panel_id     : $(this).attr("panel"),
						round_id     : "<% $round->id %>"
					}).done(function(data) {

						console.log('posted and data is');
						console.log(data);

						if (data.error) {
							alertify.error(data.message);
						} else {

							alertify.set('notifier','delay', 2);
							alertify.notify(data.message, "custom");
							alertify.set('notifier','delay', 5);

							if (data.origin_panel && data.target_entry) {
								var parentID;
								if (data.origin_panel == "notAssigned") {
									parentID = data.origin_panel;
								} else {
									parentID = data.origin_panel+"_"+data.origin_side;
								}
								$("#"+data.target_entry).appendTo("#"+parentID);
							}
						}

						// remove the original element from its origin to this
						// location, and make it visible again while destroying
						// the clone.  this is necessary because the default
						// jquery draggable behavior does not play well with
						// scrollable windows.

						var panelID = $("#"+this.id).attr("panel");
						averageStrength(panelID);

						$("#"+originPanel.id).removeClass("strength_"+panelID);
						ui.draggable.show();
						$(originPanel).prepend(ui.draggable);
						$( originPanel ).find( ".placeholder" ).remove();
					});
                }

            }).sortable({

                items: ":not(.placeholder)",

                sort: function() {

					// gets added unintentionally by droppable interacting with
					// sortable using connectWithSortable fixes this, but
					// doesn't allow you to customize active/hoverClass options

                    $( this ).removeClass( "ui-state-default" );
                }
            });

			$( ".draggable" ).draggable({

				drag: function(event, ui) {
					$("."+this.id).show();
				},

				stop: function(event, ui) {
					$("."+this.id).hide();

					var schoolID = $("#"+this.id).attr("school");
					var stateID = $("#"+this.id).attr("state");
					var titleName = $("#"+this.id).attr("title");

					$(".entry_school_"+schoolID).removeClass("dkred");
					$(".entry_state_"+stateID).removeClass("dkorange");

					$(".title_"+titleName).removeClass("borderblue");
					$(".hitcounter").addClass('hidden');

				},

				start: function(event, ui) {

					$(".entries").removeClass("dkred");
					$(".entries").removeClass("dkorange");
					$(".entries").removeClass("dkblue");
					$(".entries").removeClass("dkgreen");
					$(".entries").removeClass("dkgrey");

					var schoolID = $("#"+this.id).attr("school");
					var stateID = $("#"+this.id).attr("state");
					var titleName = $("#"+this.id).attr("title");

					$(".entry_school_"+schoolID).addClass("dkred");
					$(".entry_state_"+stateID).addClass("dkorange");

					if (titleName) {
						$(".title_"+titleName).addClass("dkgreen");
					}

					$("#"+this.id).hide();
					$("#"+this.id).removeClass("dkred");
					$("#"+this.id).removeClass("dkblue");
					$("#"+this.id).removeClass("dkgreen");

					$(".hit_"+this.id).removeClass("hidden");

				},

				disableSelection : "true",
				revert           : "invalid",
				containment      : '#wrapper',
				snap             : "true",
				snapMode         : "inner",
				helper           : "clone"

			});

		});

	</script>

		<div class="full nospace flexrow">

			<span class="twofifths">
				<h5><% $event->abbr %> <% $round->realname %> Manual Pair</h5>
			</span>

			<span class="threefifths rightalign">

				<span class="strong">
					Show:
				</span>

				<span
					id      = "schools"
					class   = "buttonwhite redtext padless"
					onClick = "toggleShow(this.id)";
				>
					Schools
				</span>

%				if ($tourn_settings->{"nsda_nats"}) {
					<span
						id      = "states"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						States
					</span>
%				}

				<span
					id      = "hits"
					class   = "buttonwhite bluetext padless"
					onClick = "toggleShow(this.id)";
				>
					Hits
				</span>

%				if ($sidelocks) {
					<span
						id      = "sides"
						class   = "buttonwhite blacktext padless"
						onClick = "toggleShow(this.id)";
					>
						Sides
					</span>
%				}

%				if ($event_settings{"seed_presets"}) {
					<span
						id      = "seed"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						Seeds
					</span>
%				}

%				if ($round->type eq "highhigh" || $round->type eq "highlow" || $round->type eq "elim") {

					<span
						id      = "bracket"
						class   = "buttonwhite orangetext padless"
						onClick = "toggleShow(this.id)";
					>
						Bracket
					</span>

%				}
			</span>
		</div>

%		if ($round->published > 0) {

			<div class="push-overlay" id="your_funeral">

				<div class = 'push-subscribe'>

					<h6 class="semibold">This is <% $round->realname %>, which is published</h6>

					<h4 class="redtext">Are you adjusting the wrong round?</h4>

					<p class="bigger ninetenths semibold marvertmuchmore">
						Do you really mean to adjust a round in progress? That
						could be dangerous; if there are results, you will delete
						them.
					</p>

					<a
						class="buttonwhite bluetext bigger invert marvertmore"
						href = "/panel/schemat/show.mhtml?round_id=<% $round->id %>"
					>Oh, no!  Return me to the schematic!</a>


					<p>
						How about <a
							class  = "white redtext semibold inline"
							target = "_blank"
							href   = "/api/download_data.mhtml?round_id=<% $round->id %>&login=1"
						>taking a backup of the round first</a>,
						at the very least?
					</p>

					<button
						class="buttonwhite redtext bigger invert marvertmore"
						onClick="yourFuneral();"
					>Yes, Adjust It</button>

				</div>
			</div>
%		}

		<div class="yellowrow padvert flexrow">

			<span class="fifteenth centeralign semibold">
				<% $round->type eq "elim" ? "Brack" : "Sect" %>
			</span>

			<span class="fifteenth centeralign semibold">
				Bye
			</span>

			<span class="fifth centeralign semibold">
				Judging
			</span>

			<span class="quarter centeralign semibold marno grow">
				<%  $sidelocks ? $aff_string : "Entry 1" %>
			</span>

			<span class="quarter centeralign semibold marno grow">
				<%  $sidelocks ? $neg_string : "Entry 2" %>
			</span>

			<span class="tenth rightalign semibold padright smaller">
				Status
			</span>

		</div>
<%perl>

		my %state;

		foreach my $panel (sort {$a->letter <=> $b->letter} @panels) {

			my %schools;
			my %states;
			my %titles;
			my %side_count;

			my $side_hits;
			my $last_side_count;
			my $hit_total;
</%perl>

			<div
				class = "row flexrow"
				id    = "panel_<% $panel->id %>"
			>
				<span class="fifteenth centeralign semibold">
					<% $panel->letter %>.
					<% $panel->bracket %>
				</span>

				<span class="fifteenth centeralign">
					<& "/funclib/bool_switch.mas",
						value    => $panel->bye,
						target   => $panel,
						class    => "thin",
						property => "bye",
						url      => "/panel/schemat/panel_switch.mhtml",
						smaller  => 1
					&>
				</span>

				<span
					class = "fifth leftalign"
					style = "min-height: 42px;"
				>

%					foreach my $ref (@{$panel_judges{$panel->id}}) {
						<div class="nospace smaller full flexrow wrap">

							<span class='tenth centeralign'>
%								if ($ref->{chair}) {
									<span class='fa fa-sm fa-gavel'>
									</span>
%								}
							</span>

%							if ($ref->{code}) {
								<span class='quarter'>
									<% $ref->{code} %>
								</span>
%							}
							<span
								class = 'threequarters grow padrightless nowrap'
								title = "<% $ref->{last} %>, <% $ref->{first} %> <% $ref->{middle} %>"
							>
								<% $ref->{last} %>, <% $ref->{first} %> <% $ref->{middle} %>
							</span>

%							unless ($event->type eq "mock_trial") {
								<div class="full nospace flexrow">
									<span class='tenth nospace'>
									</span>
									<span
										class = 'ninetenths nospace'
										title = "<% $ref->{school_name} %>"
									>
										<% $ref->{school_code} || $ref->{school_name} || "Hired" %>
									</span>
								</div>
%							}
						</div>
%					}
				</span>

%				foreach my $side ( 1 .. 2 ) {

					<span
						class = "grow quarter centeralign bordergrey droppable flexrow side_<% $side %> padvertless"
						id    = "<% $panel->id %>_<% $side %>"
						panel = "<% $panel->id %>"
						side  = "<% $side %>"
					>
<%perl>
						foreach my $entry (@{$panel_entries{$panel->id}{$side}}) {

							$schools{$entry->schoolid}++;
							$states{$entry->regionid}++;
							$state{$entry->regionid} = $entry->regioncode;

							my $last_side;
</%perl>
							<span
								class="
									ninetenths leftalign marno entries draggable max fixedheight flexcolumn wrap
									<% $last_side == $side ? "side_last" : "" %>
									entry_school_<% $entry->schoolid %>
%									if ($tourn_settings->{"nsda_nats"}) {
										entry_state_<% $entry->regionid %>
%									}
								"
								id        = "<% $entry->id %>"
								school    = "<% $entry->schoolid %>"
								district  = "<% $entry->districtcode %>"
								state     = "<% $entry->regionid %>"
								last_side = "<% $last_side %>"
							>

								<span class="full centeralign codes smallish">
									<% $entry->code %>
								</span>

								<span class="full buttonhover redtext schools hidden">
									<% $entry->schoolcode
										? $entry->schoolcode
										: $entry->schoolname
									%>
								</span>

%								if ($tourn_settings->{"nsda_nats"}) {
									<span class="full buttonhover orangetext states hidden state_<% $entry->regionid %>">
										<% $entry->regioncode %>
									</span>
%								}

								<span class="full buttonhover bluetext hits hits_<% $panel->id %> hidden">
<%perl>
									foreach my $hit (sort keys %{$hit_before{$entry->id}}) {
										next unless $in_debate{$hit};
										next unless $hit_before{$entry->id}{$hit}{"code"};
										$hit_total++ if $in_debate{$hit} == $panel->id && $hit > $entry->id;
</%perl>
										<span class="full martop marbottom nospace biggish">
											<% $hit_before{$entry->id}{$hit}{"code"} %> -
											<% $hit_before{$entry->id}{$hit}{"count"} %>x
										</span>
%									}
								</span>

%								foreach my $hit (sort keys %{$hit_before{$entry->id}}) {
%									next unless $in_debate{$hit};
									<span class="full buttonhover hitcounter hit_<% $hit %> hidden">
										<% $hit_before{$entry->id}{$hit}{"count"} %>x
<%perl>
											$m->print("( Rd");
											foreach my $round (sort keys %{$hit_before{$entry->id}{$hit}{rounds}}) {
												$m->print(" ".$round);
											}
											$m->print(")");
</%perl>
									</span>
%								}

%								if ($show_strength) {
									<span
										class = "full buttonhover bracket orangetext hidden"
										entry = "<% $entry->id %>"
										id    = "<% $bracket{$entry->id} %>"
									>
										<% $bracket{$entry->id} %>
									</span>

%								}

%								if ($event_settings{'seed_presets'}) {
									<span
										class = "full buttonhover seed orangetext hidden"
										entry = "<% $entry->id %>"
										id    = "<% $seed->{$entry->id} %>"
									>
										<% $seed->{$entry->id} %>
									</span>
%								}

%								if ($sidelocks) {

									<span class = "full buttonhover sides side_<% $panel->id %> hidden" >
<%perl>
										unless ($panel->bye) {
											$side_count{$entry->id}{"A"}++ if $side == 1;
											$side_count{$entry->id}{"N"}++ if $side == 2;
										}

										foreach my $round_key (
											sort {$a <=> $b} keys %{$hit_before{$entry->id}{'sides'}}
										) {

											next if $round_key == $round->name;

											next if (
												$tourn_settings->{nsda_nats}
												&& $round->type eq "elim"
												&& $hit_before{$entry->id}{"side_types"}{$round_key} ne "elim"
											);

											my $side_string;

											if ($hit_before{$entry->id}{"sides"}{$round_key} == 1) {
												$side_string .= "R".$round_key." A";
												$side_count{$entry->id}{"A"}++;
											}

											if ($hit_before{$entry->id}{"sides"}{$round_key} == 2) {
												$side_string .= "R".$round_key." N";
												$side_count{$entry->id}{"N"}++;
											}
</%perl>
											<span class="quarter marno">
												<% $side_string %>
											</span>
<%perl>
										}

										my $foo = $side_count{$entry->id}{"A"} - $side_count{$entry->id}{"N"};
										my $bar = $side_count{$entry->id}{"N"} - $side_count{$entry->id}{"A"};
										my $mod = $round->name % 2;

										if (
											( $side == 1 && ($foo > 1) )
										   	|| ($side == 2 && ($bar > 1) )
										) {

											$side_hits .= "<br />" if $side_hits;
											$side_hits .= "Sides:  <br />";
											$side_hits .= $entry->code." on ";

											if ($side_count{$entry->id}{"A"}
												> $side_count{$entry->id}{"N"}
											) {
												$side_hits .= "A";
												$side_hits .= " ".$side_count{$entry->id}{"A"}."x";
											}

											if ($side_count{$entry->id}{"N"}
												> $side_count{$entry->id}{"A"}
											) {
												$side_hits .= "N";
												$side_hits .= " ".$side_count{$entry->id}{"N"}."x";
											}
										}
</%perl>
									</span>
%								}

%								unless ($tourn_settings->{"nsda_nats"}) {
									<span class="full buttonhover crosses code_<% $panel->id %> hidden">
%									foreach my $other (keys %{$cross_entries{$entry->id}}) {
%										next if $other eq "count";
										<span class="full nospace">
											<% $cross_entries{$entry->id}{$other} ? $cross_entries{$entry->id}{$other}{"event"} : "" %>
										</span>
%									}
									</span>
%								}
							</span>
%						}
						</span>
					</span>
%				}

				<span class="tenth rightalign padright">
					<div class="full nospace wrap">

%					my $blah;

%					foreach my $key (keys %schools) {
%						next unless $schools{$key} > 1;
%						$blah++;

						<span
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $key %>,
								'school',
							);"
						>
							<% $schools{$key} %> from School
							<% $school_info{$key}{"code"}
								?  $school_info{$key}{"code"}
								:  $school_info{$key}{"name"}
							%>
						</span>
%					}

%					if ($tourn_settings->{"nsda_nats"}) {
%						foreach my $key (keys %states) {
%							next unless $states{$key} > 1;
%							$blah++;

							<span
								id      = "<% $key %>_<% $panel->id %>"
								class	= "statetoggle buttonwhite marbottom semibold orangetext padless biggish full centeralign wrap"
								onClick = "toggleColor(
									this.id,
									'<% $key %>',
									'state',
								);"
							>
								<% $states{$key} %> from <% $state{$key} %>
							</span>
%						}
%					}

%					foreach my $key (keys %schools) {

%						next unless $schools{$key} > 1;
%						$blah++;

						<span
							id      = "<% $key %>_<% $panel->id %>"
							class	= "schooltoggle buttonwhite marbottom redtext padless smallish full"
							onClick = "toggleColor(
								this.id,
								<% $key %>,
								'school'
							);"
						>
							<% $schools{$key} %> from School
							<% $school_info{$key}{"code"}
								?  $school_info{$key}{"code"}
								:  $school_info{$key}{"name"}
							%>

						</span>

%					}

%					if ($last_side_count) {

%						$blah++;

						<span
							id      = "last_side_<% $panel->id %>"
							class	= "last_sidetoggle buttonwhite marbottom padless smallish full"
							onClick = "toggleColor(
								this.id,
								'last',
								'side',
							);"
						>
							<% $last_side_count %> same side R<% $round->name - 1 %>
						</span>
%					}

%					if ($side_hits) {

%						$blah++;

						<span
							id      = "side_<% $panel->id %>"
							class	= "centeralign sidetoggle buttonwhite marbottom padless smallish full"
							onClick = "toggleColor(
								this.id,
								'side',
								'side',
							);"
						>
							<% $side_hits %>
						</span>

%					}

%					if ($hit_total) {

%						$blah++;

						<span
							id      = "hit_<% $panel->id %>"
							class	= "hittoggle buttonwhite marbottom padless smallish full"
							onClick = "toggleColor(
								this.id,
								'hits',
								'hits',
							);"
						>
							<% $hit_total %> repeat hits
						</span>
%					}

%					unless ($blah) {
						<span class="buttonwhite greentext padless">
							<span class="fa fa-check greentext nohover">
							</span>
						</span>
%					}

				</div>

			</div>

%		}

%		undef %panel_entries;
	</div>



