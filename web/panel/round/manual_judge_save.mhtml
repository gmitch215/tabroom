<%args>
	$tourn
	$tourn_settings
	$person
	$judge_id
	$panel_id
	$round_id
	$flight => 1
</%args>
<%init>

	Tab::Panel->set_sql( count_judges => "
		select panel.id, count(distinct ballot.judge) as judgenum
			from ballot, ballot mine, panel
		where panel.round = ?
			and panel.flight = ?
			and panel.id = mine.panel
			and mine.judge = ?
			and ballot.panel = panel.id
	");

	my $panel = Tab::Panel->search_count_judges($round_id, $flight, $judge_id)->first;
	my $judge = Tab::Judge->retrieve($judge_id);
	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my $response;

	if ($panel) {

		$response =  $judge->first." ".$judge->last." removed from section ".$panel->letter;

		my @panels;

		if (
			$round->type eq "prelim"
			&& $event->type eq "congress"
			&& $ARGS{"chair"}
		) {
			my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);
			foreach my $round (@ties) {
				push @panels, $round->panels(letter => $panel->letter)->first;
			}
		} else {
			push @panels, $panel;
		}

		foreach my $opanel (@panels) {

			if ($opanel->judgenum == 1) {

				Tab::Ballot->set_sql(
					erase_judge => " update ballot set judge = NULL where panel = ? ");

				Tab::Ballot->sql_erase_judge->execute($opanel->id);

			} else {

				Tab::Ballot->set_sql(
					erase_judge => "delete from ballot where panel = ? and judge = ?");

				Tab::Ballot->sql_erase_judge->execute($opanel->id, $judge_id);

			}
		}

		$m->comp("/funclib/log.mas",
			type        => "judge",
			judge       => $judge->id,
			tourn       => $tourn->id,
			panel       => $panel->id,
			description => "Judge removed by drag and drop",
			event       => $event->id,
			category    => $event->category->id,
			person      => $person->id
		);
	}

	unless ($panel_id eq "out") {

		my $destination  = Tab::Panel->retrieve($panel_id);
		my @destinations;

		$response =  $judge->first." ".$judge->last." added to section ".$panel->letter;

		if ($ARGS{"chair"}) {

			if ($event->type eq "congress") {
				$response .= " as parliamentarian";
			} elsif ($event->type eq "mock_trial") {
				$response .= " as presiding judge ";
			} else {
				$response .= " as chair";
			}
		}

		$m->comp("/panel/schemat/judge_add.mhtml",
			tourn          => $tourn,
			tourn_settings => $tourn_settings,
			person         => $person,
			panel_id       => $destination->id,
			judge_id       => $judge_id,
			chair          => $ARGS{"chair"},
			return         => "shiiiiiny"
		);

		$m->comp("/funclib/panel_dedupe.mas", panel => $destination);

		$m->comp("/funclib/log.mas",
			type        => "judge",
			judge       => $judge->id,
			tourn       => $tourn->id,
			panel       => $destination->id,
			description => "Judge added by drag and drop",
			event       => $event->id,
			category    => $event->category->id,
			person      => $person->id
		);
	}


	$m->clear_buffer();
    $r->content_type('application/json');
	$m->print('{ "error": false, "message": "'.$response.'"}');
	$m->abort();

</%init>
