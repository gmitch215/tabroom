<%args>
	$round    => undef
	$round_id => undef
	$event    => undef
	$event_id => undef
	$mode     => undef
</%args>
<%init>

	use List::Util 'shuffle';

	if ($round_id) {
		$round = Tab::Round->retrieve($round_id);
	}

	if ($event_id) {
		$event = Tab::Event->retrieve($event_id);
	}

	my $limit;

	if ($ARGS{"panel_id"}) {
		$limit = " and panel.id = ".int($ARGS{"panel_id"});
	} elsif ($ARGS{"panel"}) {
		$limit = " and panel.id = ".int($ARGS{"panel"});
	}

	my $dbh = Tab::DBI->db_Main();

	my $update_sth = $dbh->prepare("
		update ballot
			set ballot.speakerorder = ?
		where ballot.entry = ?
			and ballot.panel = ?
	");

	my $round_sth = $dbh->prepare("
		select
			ballot.id, ballot.entry, panel.id panel, entry.active,
			round.id round, round.name roundname, round.type,
			ignore_results.value iverson, ballot.speakerorder sporder,
			ballot.judge
		from (ballot, panel, entry, round)
			left join round_setting ignore_results on ignore_results.round = panel.round and ignore_results.tag = 'ignore_results'
		where ballot.panel = panel.id
			and ballot.entry = entry.id
			and panel.round =  round.id
			and round.id = ?
			$limit
		order by panel.id, entry.id, ballot.judge
	");

	my $event_sth = $dbh->prepare("
		select entry.id entry,
			ballot.id ballot, ballot.speakerorder sporder,
			panel.id panel,
			round.id round, round.name roundname, round.type,
			ignore_results.value iverson

		from (entry, ballot, panel, round)
			left join round_setting ignore_results
				on ignore_results.round = round.id
				and ignore_results.tag  = 'ignore_results'

		where round.event = ?
			and round.id     = panel.round
			and panel.id     = ballot.panel
			and ballot.entry = entry.id
			and entry.active = 1
			$limit
		order by panel.id, entry.id, ballot.judge
	");

	my %panels;
	my %inactive;

	if ($round > 0) {
		$round_sth->execute($round->id);
		my $result_ref = $round_sth->fetchall_hash();

		foreach my $result (@{$result_ref}) {

			$panels{$result->{panel}}{entries}{$result->{entry}} = $result->{sporder};
			$panels{$result->{panel}}{orders}{$result->{sporder}}++;

			if ($panels{$result->{panel}}{max_order} < $result->{sporder}) {
				$panels{$result->{panel}}{max_order} = $result->{sporder};
			}

			unless ($result->{active}) {
				$inactive{$result->{"entry"}}++;
			}
		}
	}

	foreach my $panel_id (sort {$a <=> $b} keys %panels) {

		my $panel = $panels{$panel_id};
		my $park  = $panel->{max_order} + 1;

		foreach my $entry_id (
			sort {
				$panel->{entries}{$a} <=> $panel->{entries}{$b}
			} keys %{$panel->{entries}}
		) {
			while ($panel->{new_orders}{$park} || $panel->{orders}{$park}) {
				$park++;
			}
			$update_sth->execute($park, $entry_id, $panel_id);

			$panel->{new_orders}{$park}++;
			$panel->{entries}{$entry_id} = $park;

		}

		my $order = 1;

		foreach my $entry_id (
			sort {
				$panel->{entries}{$a} <=> $panel->{entries}{$b}
			} keys %{$panel->{entries}}
		) {

			while ($panel->{new_orders}{$order}) {
				$order++;
			}
			$update_sth->execute($order, $entry_id, $panel_id);
			$panel->{new_orders}{$order}++;
			delete $panel->{new_orders}{$panel->{entries}{$entry_id}};
			$panel->{entries}{$entry_id} = $order;
		}
	}

	if ($ARGS{"fix"} && $ARGS{"redirect"}) {
		my $msg = "Recency gaps filled for round ".$round->realname;
		$m->redirect("show.mhtml?round_id=".$round->id."&msg=$msg");
	} elsif ($ARGS{'fix'}) {
		return "Recency reshuffled for ".$round->realname;
	}

	my %already;

	if ($round) {

		my $event = $round->event();

		$event_sth->execute($event->id);
		my $result_ref = $event_sth->fetchall_hash();
		$event_sth->finish();

		my %panels;

		foreach my $result (@{$result_ref}) {

			next if $result->{"iverson"};
			next if $round && $round->name >= $result->{"roundname"};
			next if $already{$result->{"entry"}}{"done"}{$result->{"round"}}++;

			$already{$result->{"entry"}}{"orders"}{$result->{"sporder"}}++;
			$already{$result->{"entry"}}{"total"} += $result->{"sporder"};
			$already{$result->{"entry"}}{"count"}++;
		}

		foreach my $entry (keys %already) {
			next unless $already{$entry}{"count"};
			$already{$entry}{"average"} = $already{$entry}{"total"} / $already{$entry}{"count"};
		}
	}

	my @rounds;

	if ($round) {
		push @rounds, $round;
	} elsif ($event) {
		push @rounds, $event->rounds();
	}

	my $message;
	foreach my $round (sort {$a->name <=> $b->name} @rounds) {

		my @ties = $m->comp("/funclib/congress_ties.mas", round => $round);
		my $parts = scalar @ties;


		$round_sth->execute($round->id);
		my $result_ref = $round_sth->fetchall_hash();
		$round_sth->finish();

		my %panels;

		# Recalculate averages and distance maps
		foreach my $entry (keys %already) {
			next unless $already{$entry}{"count"};
			$already{$entry}{"average"} = $already{$entry}{"total"} / $already{$entry}{"count"};
		}

		my $max_order;
		my %inactive;
		my %used;

		foreach my $result (@{$result_ref}) {
			$panels{$result->{"panel"}}{$result->{"entry"}}++;
			$used{$result->{sporder}}++;

			unless ($result->{"active"}) {
				$inactive{$result->{"entry"}}++;
			}

			if ($max_order < $result->{'sporder'}) {
				$max_order = $result->{'sporder'};
			}
		}

		my $number_of_entries = (scalar (keys %already)) + 1;

		foreach my $panel_id (keys %panels) {

			my $panel_size = scalar(keys %{$panels{$panel_id}});
			my $cohort_size = $panel_size / $parts;

			my %panel_sort;
			my %cohorts;
			my $count = $number_of_entries + 100;

			foreach my $entry (shuffle (keys %{$panels{$panel_id}}) ) {

				while ($panels{$panel_id}{new_orders}{$count} || $used{$count}) {
					$count++;
				}

				# Park it with some other random number to get out of range
				$update_sth->execute($count, $entry, $panel_id);
				$count++;

				if ($inactive{$entry}) {

				} elsif ($round->name % 2) {

					foreach my $past (keys %{$already{$entry}{"orders"}}) {
						$panel_sort{$entry} += $past;
					}

					unless ($panel_sort{$entry}) {
						$panel_sort{$entry} = $cohort_size;
					}

				} else {

					my $best_order;
					my $best_distance;

					foreach my $order (1 .. $panel_size) {
						my $total;

						foreach my $past (keys %{$already{$entry}{"orders"}}) {
							$total += abs($past - $order);
						}
						$panel_sort{$entry}{$order} = $total;
					}
				}
			}

			$count = 1;
			undef %used;

			if ($round->name % 2) {

				foreach my $entry (sort {$panel_sort{$b} <=> $panel_sort{$a}} keys %panel_sort) {

					while ($used{$count}) {
						$count++;
					}

					$update_sth->execute($count, $entry, $panel_id);
					$already{$entry}{"orders"}{$count}++;
					$already{$entry}{"total"} += $count;
					$already{$entry}{"count"}++;
					$used{$count}++;
					$count++;
				}

			} else {

				while (keys %panel_sort) {
					my @entries = sort {$panel_sort{$b}{$count} <=> $panel_sort{$a}{$count}} keys %panel_sort;
					my $entry = $entries[0];
					delete $panel_sort{$entry};

					while ($used{$count}) {
						$count++;
					}

					$update_sth->execute($count, $entry, $panel_id);
					$already{$entry}{"orders"}{$count}++;
					$already{$entry}{"total"} += $count;
					$already{$entry}{"count"}++;
					$used{$count}++;
					$count++;
				}
			}
		}

		$message .= "<br />" if $message;
		$message .= $round->realname." orders shuffled";
	}

	if ($ARGS{"redirect"}) {

		if ($round) {
			$m->redirect("/panel/schemat/show.mhtml?round_id=".$round->id."&msg=$message");
		} else {
			$m->redirect("/panel/schemat/show.mhtml?event_id=".$event->id."&msg=$message");
		}
	}
	return $message;

</%init>
