<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$event_id => undef
</%args>
<%init>

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my $event = Tab::Event->retrieve($event_id);
	$m->abort unless $event;
	my %event_settings = $event->all_settings();

	my @settings = (
		"panel_labels",
		"schem_orientation",
		"schem_designation",
		"autopublish_results",
		"judge_publish_results",
		"school_percent_limit",
		"prep_offset",
		"menu_pattern"
	);

	if ($tourn_settings->{"nsda_district"}) {

		push @settings, "nsda_min_prelims";

		if ($person->site_admin || $person_settings->{"nsda_admin"}) {
			push @settings, "no_side_constraints";
			push @settings, "no_side_constraints";
			push @settings, "powermatch";
			push @settings, "pullup_method";
			push @settings, "elim_method";
			push @settings, "seed_presets";
		}

		if ($tourn_settings->{"nsda_district"} && $event->type eq "debate") {

			push @settings, "district_mode";
			push @settings, "district_advance";
			push @settings, "double_elimination";
			push @settings, "round_robin";

			my $robin_set = Tab::Protocol->search(
				tourn => $tourn->id,
				name  => "Round Robin"
			)->first;

			my $elim_protocol = Tab::Protocol->search(
				tourn => $tourn->id,
				name  => "Debate Elim"
			)->first;

			my $double_elim_protocol = Tab::Protocol->search(
				tourn => $tourn->id,
				name  => "Debate Double Elimination"
			)->first;

			if ($ARGS{"district_mode"} eq "single") {

				$ARGS{"round_robin"} = 0;
				$ARGS{"double_elimination"} = 0;

				foreach my $elim ($event->rounds(type => "elim")) {
					$elim->protocol($elim_protocol);
					$elim->update();
				}

			} elsif ($ARGS{"district_mode"} eq "double") {

				$ARGS{"round_robin"} = 0;
				$ARGS{"double_elimination"} = 1;

				unless ($double_elim_protocol) {

					$double_elim_protocol = Tab::Protocol->create({
						tourn => $tourn->id,
						name  => "Debate Double Elimination"
					});

					Tab::Tiebreak->create({
						name          => "losses",
						protocol  => $double_elim_protocol->id,
						count         => "elim",
						multiplier    => 1,
						priority      => 1
					});
				}

				foreach my $elim ($event->rounds(type => "elim")) {
					$elim->protocol($double_elim_protocol);
					$elim->update();
				}

			} elsif ($ARGS{"district_mode"} eq "robin") {

				$ARGS{"round_robin"} = 1;
				$ARGS{"double_elimination"} = 0;

				unless ($robin_set) {

					$robin_set = Tab::Protocol->create({
						tourn => $tourn->id,
						name  => "Round Robin"
					});

					Tab::Tiebreak->create({
						name          => "winloss",
						protocol  => $robin_set->id,
						count         => "prelim",
						multiplier    => 1,
						priority      => 1
					});

					Tab::Tiebreak->create({
						name          => "headtohead",
						protocol  => $robin_set->id,
						highlow       => 1,
						highlow_count => 1,
						count         => "prelim",
						multiplier    => 1,
						priority      => 2
					});
				}

				foreach my $round ($event->rounds()) {
					$round->protocol($robin_set);
					$round->update();
				}
			}
		}

		if ($person->site_admin) {
			push @settings, "default_panel_size";
			push @settings, "max_panel_size";
			push @settings, "min_panel_size";
		}

	} else {
		push @settings, "no_side_constraints";
		push @settings, "powermatch";
		push @settings, "pullup_method";
		push @settings, "elim_method";
		push @settings, "seed_presets";
		push @settings, "max_pref";
		push @settings, "break_point";
		push @settings, "default_panel_size";
		push @settings, "max_panel_size";
		push @settings, "min_panel_size";
		push @settings, "max_nobreak_pref";
	}

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		if ($setting eq "schem_orientation") {
			if ($event_settings{"code_length"} eq "short") {
				undef $value if ($value eq "horizontal");
			} else {
				undef $value if ($value eq "vertical");
			}
		}

		if ($setting eq "menu_pattern") {
			$value = uc($value);
			$value =~ s/\s+//g;
		}

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 unless $value;
			my $description = "Setting $setting changed to $value";

			eval {
				$event->setting($setting, $value);

				$m->comp("/funclib/log.mas",
					type        => 'tabbing',
					event       => $event->id,
					tourn       => $event->tourn->id,
					person      => $person->id,
					description => $description
				);
			};
		}
	}

	my $msg = "Pairing settings saved";
	$m->redirect("sectioning.mhtml?event_id=".$event->id."&msg=$msg");

</%init>
