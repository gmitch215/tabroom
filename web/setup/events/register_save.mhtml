<%args>
	$person
	$person_settings
	$tourn
	$tourn_settings
	$event_id
</%args>
<%init>

	my $event = Tab::Event->retrieve($event_id);

	my $msg;
	my $err;

	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	my $now = DateTime->now();

	my %event_settings = $event->all_settings();

	my @date_fields = (
		"deadline",
		"freeze_deadline",
		"rereg_start",
		"rereg_end",
		"fine_deadline"
	);

	foreach my $field (@date_fields) {

		my $date = $ARGS{$field};
		my $time = $ARGS{$field."time"};

		my $dt = eval {
			return Tab::dtme($date, $time, $tz);
		};

		if ($date && (not defined $dt)) {
			$err .= "Invalid date/time sent for $field: $date $time.";
			$err .= " Please be sure they are properly formatted using the date and time pickers";
		}

		if ($field eq "deadline" && $dt > $tourn->reg_end->set_time_zone($tz)) {
			$err .= "A custom entry deadline can only be set BEFORE the tournament wide deadline.";
			undef $dt;
		}

		if ($dt > $tourn->end->set_time_zone($tz)) {
			$err .= "Deadline $field set after tournament end.";
			undef $dt;
		}

		if ($dt) {
			$event->setting($field, "date", $dt);
		} else {
			$event->setting($field, "0");
		}
	}

	my @settings = (
		"code_start",
		"cap",
		"waitlist",
		"no_waitlist",
		"always_tba",
		"waitlist_all",
		"waitlist_rank",
		"drop_fine",
		"no_judge_burden",
		"adjust_judge_rounds_owed",
		"adjust_judges_owed",
		"field_report",
		"field_waitlist",
		"code_hide",
		"enter_me_twice",
		"no_prefs",
		"hybrids",
		"apda",
		"seed_presets",
		"ask_quals",
		"no_rereg",
		"more_quals",
		"adjust_strikes",
		"at_larges",
		"adjust_judges_fees",
		"nats_judge_burden",
		"nats_jpool"
	);

	my $districts = $tourn_settings->{"nsda_district"};
	undef $districts if $person->site_admin;

	unless ($districts) {
		push @settings, "ask_for_titles";
		push @settings, "ask_for_authors";
		push @settings, "ask_for_bibliography";
		push @settings, "ask_for_po";
		push @settings, "school_cap";
		push @settings, "supp";
		push @settings, "reveal_codes";
		push @settings, "open_supp";
	}

	push @settings, "house_chambers";

	if ($tourn_settings->{"nsda_nats"}) {
		push @settings, "nats_screwy_burden";
		push @settings, "conn";
		push @settings, "district_cap";
		push @settings, "stefan";
		push @settings, "no_autopromotion";
	}

	foreach my $setting (@settings) {

		my $value = $ARGS{$setting};

		unless ($value) {
			if ($setting eq "point_increments") {
				$value = "whole";
			} elsif ($setting eq "min_points") {
				$value = "1";
			} elsif ($setting eq "max_points") {
				$value = "100";
			} elsif ($setting eq "mavericks") {
				$value = "nothing";
			} else {
			}
		}

		if ($value eq $event_settings{$setting}) {

		} else {

			$value = 0 if $value eq "none";
			$value = 0 unless $value;

			my $description = "Setting $setting changed to $value";

			$m->comp("/funclib/log.mas",
				type        => 'tabbing',
				event       => $event->id,
				tourn       => $tourn->id,
				person      => $person->id,
				description => $description
			);

			$event->setting($setting, $value);
		}
	}

	my @text_fields = (
		"congress_entry_cards"
	);

	foreach my $text (@text_fields) {

		my $value = $m->comp(
			"/funclib/save_editor.mas",
			text => $ARGS{$text}
		);

		if ($value) {
			$event->setting($text, "text", $value);
		} else {
			$event->setting($text, 0);
		}
	}

	foreach my $breakout (1 .. $event_settings{"breakouts"}) {

		next if $event_settings{"breakout_".$breakout."_delete"};

		if ($ARGS{"breakout_".$breakout."_delete"} > 0) {

			$event->setting("breakout_".$breakout."_delete", 1);
			$event->setting("breakout_".$breakout."_label", "");
			$event->setting("breakout_".$breakout."_selfreg", "");
			$event->setting("breakout_".$breakout."_exclude_elims", "");

		} else {

			$event->setting("breakout_".$breakout."_label",
				$ARGS{"breakout_".$breakout."_label"});

			$event->setting("breakout_".$breakout."_selfreg",
				$ARGS{"breakout_".$breakout."_selfreg"});

			$event->setting("breakout_".$breakout."_exclude_elims",
				$ARGS{"breakout_".$breakout."_exclude_elims"});
		}
	}

	if ($ARGS{"breakout_new"}) {

		my $breakout = $ARGS{"breakouts"} + 1;
		$event->setting("breakouts", $breakout);
		$event->setting("breakout_".$breakout."_label", $ARGS{"breakout_new"});
		$event->setting("breakout_".$breakout."_delete", 0);
		$event->setting("breakout_".$breakout."_selfreg", 0);
		$event->setting("breakout_".$breakout."_exclude_elims", 1);
		$msg .= "Added breakout number $breakout";
	}

	if ($tourn_settings->{nsda_nats}) {
		$m->redirect("nats_register.mhtml?event_id=".$event->id."&msg=$msg&err=$err");
	} elsif ($tourn_settings->{nsda_district}) {
		$m->redirect("districts_register.mhtml?event_id=".$event->id."&msg=$msg&err=$err");
	} else {
		$m->redirect("register.mhtml?event_id=".$event->id."&msg=$msg&err=$err");
	}

</%init>
