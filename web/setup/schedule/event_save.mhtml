<%args>
	$person
	$tourn
	$tourn_settings
	$event_id => undef
</%args>
<%init>

	unless ($event_id) {
		$m->print("No event sent.  Hit back and try again");
		$m->abort;
	}

	my $event = Tab::Event->retrieve($event_id);
	my $err;
	my $roundyell_done;

	my @sites;
	my $default_site;

	if (
		$event->setting('nsda_campus')
		|| $event->setting('nsda_campus_observers')
	) {
		$default_site = 1;
	} elsif ($tourn_settings->{"nsda_district"}) {

		my $weekend_id = $event->setting('weekend');

		my $weekend = Tab::Weekend->retrieve($weekend_id)
			if $weekend_id;

		$default_site = $weekend->site
			if $weekend
			&& $weekend->site;
	} else {
		@sites = $tourn->sites;
		$default_site = @sites if @sites;
	}

	my $abbr = $event->abbr;
	my $name = $event->name;

	my %moved;

	TIMESLOT:
	foreach my $timeslot ($tourn->timeslots) {

		my @existing_rounds = Tab::Round->search(
			timeslot => $timeslot->id,
			event    => $event->id
		);

		unless (@existing_rounds) {
			push @existing_rounds, 0;
		}

		my $counter;

		ROUND:
		foreach my $round (@existing_rounds) {

			undef $round if $round == 0;

			if ($round) {
				next if $moved{$round->id};
			}

			my $key = $timeslot->id;

			if ($counter++ > 0) {
				$key .= "_".$counter;
			}

			unless ($ARGS{$key} > 0) {
				if ($round) {
					foreach my $parent ($round->parents) {
						$parent->runoff("");
						$parent->update();
					}

					$round->delete();
				}
				next ROUND;
			}

			my $label = $ARGS{$key."_label"};

			if ( length($event->abbr > 2) && index(uc($label),uc($event->abbr)) != -1) {

				$err = "Do not include the abbreviation of the event in the round label. Tabroom automatically does it for you. If you include it too, it will list the event twice (LD LD Round 1), and look bad.";

				$label =~ s/$abbr." "//egi;
				$label =~ s/$abbr//egi;
			}

			if ( index(uc($label),uc($event->name)) != -1) {

				$err = "Do not include the name of the event in the round label.  Tabroom automatically does it for you. If you include it too, it'll be listed as 'Duo Duo Round 1', which is kind of nonsense.";

				$label =~ s/$name." "//egi;
				$label =~ s/$name//egi;
			}

			$label =~ s/^\s+//;
			$label =~ s/\s+$//;

			$label =~ s/^Rd. //;
			$label =~ s/^Rnd. //;
			$label =~ s/^Rd //;
			$label =~ s/^Rnd //;
			$label =~ s/^Round //;
			$label =~ s/^R //;

			$label =~ s/^Sess. //;
			$label =~ s/^Ssn. //;
			$label =~ s/^Sess //;
			$label =~ s/^Ssn //;
			$label =~ s/^Session //;
			$label =~ s/^S //;

			if ($round && $label eq $round->name) {
				undef $label;
				unless ($roundyell_done++) {

					$err .= "<br /><br />There is no need to label rounds with their number. Labels are only to call rounds things like Semi or Finals.  Otherwise formatting is automatic.";

				}
			}

			my $site_id = int($ARGS{$key."_site"});
			$site_id = $default_site unless $site_id;

			my $protocol_id = $ARGS{$key."_protocol"};
			my $round_type = $ARGS{$key."_type"};

			if ($round) {

				if ($ARGS{$key."_move"} > 0) {
					$round->timeslot($ARGS{$key."_move"});
					#Otherwise it might get deleted when you get to its new timeslot
					$moved{$round->id}++;
				}

				$round->label($label);
				$round->site($site_id);
				$round->type($round_type);
				$round->protocol($protocol_id);
				$round->flighted($ARGS{$key."_flight"});
				$round->update();

			} else {

				my $num_judges = 1;
				$num_judges = 3 if $ARGS{$key."_type"} eq "elim";
				$num_judges = 3 if $ARGS{$key."_type"} eq "final";
				$protocol_id = 0 unless $protocol_id;

				$round = Tab::Round->create({
					event      => $event->id,
					timeslot   => $timeslot->id,
					start_time => $timeslot->start,
					label      => $label,
					type       => $round_type,
					protocol   => $protocol_id,
					site       => $site_id,
					flighted   => $ARGS{$key."_flight"}
				});

				$round->setting("num_judges", $num_judges);
			}
		}
	}

	my $description = $person->first." ".$person->last." (".$person->email.") ";
	$description .= " has altered the schedule for ".$event->name;

	$m->comp("/funclib/log.mas",
		type        => 'tabbing',
		event       => $event->id,
		tourn       => $tourn->id,
		person      => $person->id,
		description => $description
	);

	$m->comp("/funclib/renumber_rounds.mas", event_id => $event->id);

	my $msg = "Round assignments saved";

	$m->redirect("/setup/schedule/event.mhtml?event_id=".$event->id."&msg=$msg&err=$err");


</%init>
