<%args>
	$tourn
	$person
	$category_id
	$num_schools
	$num_hires
</%args>
<%init>

	use POSIX;
	use List::Util 'shuffle';

	my $total = $num_schools + $num_hires;

	my $category = Tab::Category->retrieve($category_id);

	my @schools = $m->comp("/funclib/category_schools.mas", category => $category);

	my %school_entries;
	my $total_entries;

	Tab::Judge->set_sql( delete_ballots => "
		delete ballot.* from ballot, judge
		where judge.category = ?
		and judge.id = ballot.judge
	");

	Tab::Judge->set_sql( delete_prefs => "
		delete rating.* from
		rating, judge
		where judge.category = ?
		and judge.id = rating.judge
	");

	Tab::Judge->set_sql( delete_judges => "
		delete from judge where category = ?
	");

	Tab::Judge->sql_delete_ballots->execute($category->id);
	Tab::Judge->sql_delete_prefs->execute($category->id);
	Tab::Judge->sql_delete_judges->execute($category->id);

	my @all_entries;

	foreach my $school (@schools) {
		my @entries = $m->comp("/funclib/category_entries.mas", category => $category, school => $school);
		@{$school_entries{$school->id}} = @entries;
		$total_entries += scalar @entries;
		push @all_entries, @entries;
	}

	my %school_quota;

	foreach my $school (@schools) {
		my $percentage = ((scalar @{$school_entries{$school->id}}) / $total_entries) ;
		$school_quota{$school->id} = ceil($percentage * $num_schools);
	}

	my $counter;

	foreach my $school (@schools) {

		foreach (1 .. $school_quota{$school->id}) {

			next if $counter >= $total;
			$counter++;

			Tab::Judge->create({
				category => $category->id,
				school      => $school->id,
				first       => "Test",
				last        => $counter,
				code        => $counter + 999,
				active      => 1,
				obligation  => (rand(7) + 1),
				tab_rating  => (rand(99) + 1)
			});

		}
	}

	foreach (1 .. $num_hires) {

		next if $counter >= $total;
		$counter++;

		Tab::Judge->create({
			category => $category->id,
			school      => 0,
			first       => "Hired",
			last        => $counter,
			code        => $counter + 999,
			active      => 1,
			hired       => (rand(7) + 1),
			tab_rating  => (rand(99) + 1)
		});

	}

	if ($category->setting("prefs")) {

		my @judges = $category->judges;
		my $num_judges = scalar @judges;

		if ($category->setting("prefs") eq "ordinals") {

			foreach my $entry (@all_entries) {

				@judges = shuffle(@judges);

				my $count;

				foreach my $judge (@judges) {

					$count++;
					my $percentile = $count / $num_judges;

					Tab::Rating->create({
						entry      => $entry->id,
						judge      => $judge->id,
						type       => "entry",
						ordinal    => $count,
						percentile => $percentile
					});
				}

			}

		} else {

			my @tiers = $category->rating_tiers;

			if (@tiers) {

				foreach my $entry (@all_entries) {

					@judges = shuffle @judges;

					foreach my $judge (@judges) {

						@tiers = shuffle @tiers;

						my $tier_id = $tiers[0]->id;

						Tab::Rating->create({
							entry       => $entry->id,
							judge       => $judge->id,
							type        => "entry",
							rating_tier => $tier_id
						});
					}
				}
			}
		}
	}


	my $msg = "Created $counter fake judges in ".$category->abbr;

	Tab::ChangeLog->create({
		tourn       => $tourn,
		tag         => "tabbing",
		person      => $person,
		description => $msg
	});

	$m->redirect("fake.mhtml?category_id=$category_id&msg=$msg");

</%init>

