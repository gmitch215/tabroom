<%args>
	$tourn
	$tourn_settings
	$person
	$person_settings
	$merge_target_id => undef
	$restore_id      => undef
	$prefix          => undef
	$dbh
</%args>
<%init>

	my $err;
	my $msg;

	Tab::Entry->set_sql(update_tourn => "
		update entry, event
		set entry.tourn = ?
		where entry.event = event.id
		and event.category = ?
	");

	Tab::Fine->set_sql(update_tourn => "
		update fine
		set tourn = ?
		where school = ?
	");

	Tab::Event->set_sql(update_tourn => "
		update event
		set event.tourn = ?
		where event.category = ?
	");

	Tab::ChangeLog->set_sql(update_tourn => "
		update change_log, event
		set change_log.tourn = ?
		where change_log.event = event.id
		and event.category = ?
	");

	Tab::JudgeHire->set_sql(update_tourn => "
		update judge_hire, category
		set judge_hire.tourn = ?
		where judge_hire.category = ?
	");

	Tab::ResultSet->set_sql(update_tourn => "
		update result_set, event
		set result_set.tourn = ?
		where result_set.event = event.id
		and event.category = ?
	");

	Tab::Strike->set_sql(update_tourn_entry => "
		update strike, entry, event
		set strike.tourn = ?
		where strike.entry = entry.id
		and entry.event = event.id
		and event.category = ?
	");

	Tab::Strike->set_sql(update_tourn => "
		update strike, judge
		set strike.tourn = ?
		where strike.judge = judge.id
		and judge.category = ?
	");

	my $protocol_sth = $dbh->prepare("
		update protocol, tourn t1, tourn t2, event, round
			set protocol.tourn = t1.id
		where 1=1
			and t1.id = ?
			and t2.id = ?
			and protocol.tourn = t2.id
			and t1.id = event.tourn
			and event.id = round.event
			and round.protocol = protocol.id
	");

	my $timeslot_sth = $dbh->prepare("
		update timeslot, tourn t1, tourn t2, event, round
			set timeslot.tourn = t1.id
		where 1=1
			and t1.id = ?
			and t2.id = ?
			and protocol.tourn = t2.id
			and t1.id = event.tourn
			and event.id = round.event
			and round.timeslot = timeslot.id
	");

	if ($restore_id) {

		my $restore = Tab::Tourn->retrieve($restore_id);

		if ($restore) {

			foreach my $category ($tourn->categories) {

				if ($category->setting("original_tourn") == $restore->id) {

					Tab::Strike->sql_update_tourn->execute($restore->id, $category->id);
					Tab::Strike->sql_update_tourn_entry->execute($restore->id, $category->id);
					Tab::ResultSet->sql_update_tourn->execute($restore->id, $category->id);
					Tab::ChangeLog->sql_update_tourn->execute($restore->id, $category->id);
					Tab::JudgeHire->sql_update_tourn->execute($restore->id, $category->id);
					Tab::Entry->sql_update_tourn->execute($restore->id, $category->id);
					Tab::Event->sql_update_tourn->execute($restore->id, $category->id);

					$category->tourn($restore->id);
					$category->update();
					$category->setting("original_tourn", 0);

					my $remove_prefix = $category->setting("original_prefix");

					if ($remove_prefix) {
						unprefix($category, $remove_prefix);

						foreach my $event ($category->events) {
							unprefix($event, $remove_prefix);
						}
					}
				}
			}

			foreach my $school ($tourn->schools) {

				if ($school->setting("original_tourn") == $restore->id) {

					Tab::Fine->sql_update_tourn->execute($restore->id, $school->id);
					$school->tourn($restore->id);
					$school->update();
					$school->setting("original_tourn", 0);
				}
			}

			$protocol_sth->execute($restore->id, $tourn->id);
			$timeslot_sth->execute($restore->id, $tourn->id);

			$msg = "The entries, events and schools from ".$restore->name." are now restored to it.";

		} else {

			$err = "No such tournament for ID $restore_id";

		}

	} elsif ($merge_target_id) {

		my $merge_target = Tab::Tourn->retrieve($merge_target_id);

		if ($merge_target) {

			my $permission = Tab::Permission->search(
				tourn => $merge_target->id,
				person => $person->id
			)->first;

			if (
				$permission &&
					($permission->tag ne "owner" || $permission->tag ne "tabber")
				|| $person->site_admin
				|| $person_settings->{"nsda_admin"}
			) {

				foreach my $category ($tourn->categories) {

					Tab::Strike->sql_update_tourn->execute($merge_target->id, $category->id);
					Tab::Strike->sql_update_tourn_entry->execute($merge_target->id, $category->id);
					Tab::ResultSet->sql_update_tourn->execute($merge_target->id, $category->id);
					Tab::ChangeLog->sql_update_tourn->execute($merge_target->id, $category->id);
					Tab::JudgeHire->sql_update_tourn->execute($merge_target->id, $category->id);
					Tab::Entry->sql_update_tourn->execute($merge_target->id, $category->id);
					Tab::Event->sql_update_tourn->execute($merge_target->id, $category->id);

					$category->tourn($merge_target->id);
					$category->update();
					$category->setting("original_tourn", $tourn->id);

					if ($prefix) {

						$prefix =~ s/[^\w\s]//g;
						$prefix = "A" unless $prefix;

						prefix($category, $prefix);

						foreach my $event ($category->events() ) {
							prefix($event, $prefix);
						}

						$category->setting('original_prefix', $prefix);

					}
				}

				foreach my $school ($tourn->schools) {

					Tab::Fine->sql_update_tourn->execute($merge_target->id, $school->id);
					$school->tourn($merge_target->id);
					$school->update();
					$school->setting("original_tourn", $tourn->id);
				}

				$protocol_sth->execute($merge_target->id, $tourn->id);
				$timeslot_sth->execute($merge_target->id, $tourn->id);

				$msg = "Tournament entries, schools and events are now part of ".$merge_target->id;

			} else {

				$err = "You do not have full admin or ownership rights on target tournament ".$merge_target->name." so no merge is possible.  Contact the tournament admins to increase your access level.";

			}

		} else {

			$err = "No such tournament for ID $restore_id";
		}
	}

	my @access_tourns = $m->comp(
		"/funclib/person_tourns.mas",
		person       => $person,
		district     => $tourn_settings->{nsda_district},
		no_districts => 1,
		all          => 1
	);

	my $limit;

	Tab::Tourn->set_sql(restores => "
		select distinct tourn.*
		from tourn
		where tourn.id in (
			select distinct category_setting.value
			from category_setting, category
			where category_setting.tag = 'original_tourn'
			and category_setting.category = category.id
			and category.tourn = ?
		)
	");

	my @restores = Tab::Tourn->search_restores($tourn->id);

	sub unprefix {

		my ($object, $prefix) = @_;

		my $name = $object->name;
		$name =~ s/^$prefix//g;
		$name =~ s/^\s+//;
		$object->name($name);

		my $abbr = $object->abbr;
		$abbr =~ s/^$prefix//g;
		$abbr =~ s/^\s+//;
		$object->abbr($abbr);

		$object->update();
		return $object;
	}

	sub prefix {
		my ($object, $prefix) = @_;

		my $name = $object->name;
		$name =~ s/^\s+//;
		$name = $prefix." ".$name;
		$object->name($name);

		my $abbr = $object->abbr;
		$abbr =~ s/^\s+//;
		$abbr = $prefix." ".$abbr;
		$object->abbr($abbr);

		$object->update();
		return $object;
	}

</%init>


	<div class="main">

		<h3><% $tourn->name %></h3>

		<& "tabbar.mas",
			tourn          => $tourn,
			tourn_settings => $tourn_settings,
			whoami         => "merge"
		&>

%		if ($msg) {
			<div class="full padvertmore centeralign libl borderlight bluetext semibold">
				<% $msg %>
			</div>
%		}

%		if ($err) {
			<div class="full padvertmore centeralign lird borderlight redtext semibold">
				<% $err %>
			</div>
%		}

		<h4>Merge tournaments for tabbing</h4>

		<p>
			Use this function to merge your entries, rounds, judges, etc into
			another tournament for the purposes of sharing rooms, judges, and
			resources with another tournament, such as a District qualifier.
		</p>

		<p>
			You must have admin level access to BOTH tournaments to merge them.
		</p>

		<p class="semibold redtext">
			This process will not merge judging categories.  Do not move
			events from one tournament's judge categories to another.
			If you do, it will be impossible to re-separate the two
			tournaments afterwards.
		</p>

		<p>
			Instead, to share judging, you can go to Paneling - Judges, and
			create Judge Pools for use in your divisions, and populate it with
			judges from both merged tournaments' categories. Then assign your
			rounds to pull from that judge pool and it will pull from both sets
			of judging.
		</p>

		<p>
			Rooms will work in the normal way; you can create pools or not as
			you will.
		</p>

%		if ($tourn_settings->{nsda_district}) {
			<h6>Special Notes for NSDA Districts</h6>

			<p>
				Because of the unique rules of NSDA Districts and the manner in
				which Nationals registration depends on Tabroom data in
				Districts, you may not merge a District tournament with a
				non-District tournament.
			</p>

			<p>
				For similar reasons if you run a "Worlds Qualifier" you cannot
				run it as an event in your normal District tournament but
				should run it as a separate event.
			</p>

			<p>
				If your reason for trying this is different than that, please
				contact us before going any further; gumming up the data for
				your district tournament will create an awful lot of work and
				likely delay your schools' ability to register for Nationals.
			</p>
%		}

		<form
			action = "merge_tourns.mhtml"
			method = "post"
		>

			<div class="row padvert flexrow">
				<span class="half semibold padleftmore">
					Merge target tournament:
				</span>

				<span class="half padrightmore">
					<select name="merge_target_id">
						<option value=""></option>
%						foreach my $other (@access_tourns) {
%							next if $other->id == $tourn->id;
							<option
								value="<% $other->id %>"
							><% $other->start->year %> <% $other->name %></option>
%						}
					</select>
				</span>

			</div>

			<div class="row padvert flexrow">

				<span class="threequarters semibold padleftmore">
					Pre-pend a short prefix/code to distinguish your events
					from the other tournaments.

					<span class="padtopless smallish italic orangetext">
						Only numbers and letters allowed here
					</span>
				</span>

				<span class="quarter padrightmore">
					<input
						type = "text"
						name = "prefix"
						size = "4"
						max  = "4"
					>
				</span>
			</div>

			<div class="libl row padvert rightalign padrightmore">
				<input
					type  = "submit"
					value = "Merge Tournaments"
				>
			</div>
		</form>

%		if (@restores) {

			<h4 class="martopmore">Split merged tournaments</h4>

			<p>
				Restore events/rounds/categories to the following tournaments:
			</p>

%			foreach my $restore (@restores) {

				<form
					action="merge_tourns.mhtml"
					method="post"
				>
					<input
						type  = "hidden"
						name  = "restore_id"
						value = "<% $restore->id %>"
					>

					<div class="row">

						<span class="twothirds">
							<% $restore->start->year %> <% $restore->name %>
						</span>

						<span class="third rightalign">
							<input
								type  = "submit"
								value = "Un-Merge"
							>
						</span>

					</div>

				</form>
%			}

%		}

	</div>

