<%args>
	$person
	$event_id => undef
	$judge_id => undef
	$skipme   => undef
</%args>
<%init>

	use Math::Round qw(nearest);

	unless ($event_id && $judge_id) {
		my $err = "I didn't get both a judge and an event.  Hit back and refresh and try again.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $event = Tab::Event->retrieve($event_id);
	my $judge = Tab::Judge->retrieve($judge_id);

	unless ($event && $judge) {
		my $err = "No ballots found for that judge and that event.";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	unless ($person->site_admin || $judge->person->id == $person->id) {
		my $err = "You are not authorized to enter ballots for that judge.";
		$m->redirect("/user/home.mhtml?err=$err")
	}

	my $round = $event->rounds->first;

	unless ($round > 0) {
		my $err = "No scheduled rounds were found for that event so I cannot create a test ballot";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $ballot_count;

	my $category = $event->category;
	my %event_settings = $event->all_settings;
	my %category_settings = $category->all_settings;

	my $max_entry = $event_settings{"max_entry"} || 1;
	my $tourn = $category->tourn;
	my $type = $event->type;

	if ($type eq "speech") {
		$ballot_count = 6;
	} elsif ($type eq "congress") {
		$ballot_count = 12
	} else {
		$ballot_count = 2
	}

	my $aff_string = $event_settings{"aff_label"};
	my $neg_string = $event_settings{"neg_label"};
	$aff_string = "Aff" unless $aff_string;
	$neg_string = "Neg" unless $neg_string;

	my $no_lpw++ if $event_settings{"no_lpw"};
	$no_lpw++ if $event->type eq 'speech' || $event->type eq 'congress';
	undef $no_lpw if $event_settings{"allow_lowpoints"};

	my $tiebreaks               = $round->protocol;
	my $ballot_entry_name       = $category_settings{"ballot_entry_names"};
	my $ballot_entry_first_name = $category_settings{"ballot_entry_first_names"};
	my $ballot_school_code      = $category_settings{"ballot_school_codes"};
	my $ballot_school_name      = $category_settings{"ballot_school_names"};

	my $wins;
	my $team_points;
	my $points;
	my $ranks;
	my $team_ranks;

	my @entries;
	my %entry_values = ();
	my %entry_headcount = ();
	my %entry_students = ();
	my %student_entry = ();
	my $max_headcount;
	my %already;
	my %drop_ballot;

	my %comments_left;
	my $rfd_left;

	my %entry_ballot;

	foreach my $tb ($tiebreaks->tiebreaks) {

		next if
			$tb->count eq "prelim"
			&& ( $round->type eq "elim"
				|| $round->type eq "final"
				|| $round->type eq "runoff");

		$ranks++ if (
			$tb->name eq "ranks"
			|| $tb->name eq "reciprocals");

		$wins++ if (
			$tb->name eq "opp_wins"
			|| $tb->name eq "winloss"
			|| $tb->name eq "losses"
			|| $tb->name eq "ballots"
		);

		$points++ if (
			$tb->name eq "points"
			|| $tb->name eq "competition"
			|| $tb->name eq "opp_points");

		if ($tb->child) {

			foreach my $otb ($tb->child->tiebreaks) {

				next if
					$otb->count eq "prelim"
					&& ( $round->type eq "elim"
						|| $round->type eq "final"
						|| $round->type eq "runoff"
					);

				$ranks++ if (
					$otb->name eq "ranks"
					|| $otb->name eq "reciprocals"
					|| $otb->name eq "opp_ranks"
				);

				$wins++ if (
					$otb->name eq "opp_wins"
					|| $otb->name eq "winloss"
					|| $otb->name eq "losses"
				);

				$points++ if (
					$otb->name eq "points"
					|| $otb->name eq "opp_points"
				);
			}
		}
	}

	my $total_points;

	if ($type eq "speech" || $type eq "congress") {

		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;

	} elsif ($event_settings{"team_points"}) {

		$team_points++ if $points;
		$team_ranks++ if $ranks;
		undef $points;
		undef $ranks;

	}

	my $forfeit;
	$forfeit++ if $type eq "speech"
		&& $tiebreaks->setting("forfeits_never_break");

	my $forfeit_last;
	$forfeit_last++ if $type eq "speech"
		&& $tiebreaks->setting("forfeits_rank_last");

	my $max_points = $event_settings{"max_points"};
	my $min_points = $event_settings{"min_points"};

	$min_points = 0 unless $min_points;

	my $point_increments = $event_settings{"point_increments"};
	my $point_ties       = $event_settings{"point_ties"};
	my $subscores        = $event_settings{"wsdc_categories"};

	my %max_subpoints = ();
	my %min_subpoints = ();

	my @scores = ("Style", "Content", "Strategy", "POI");

	foreach my $key (@scores) {

		$min_subpoints{$key} = $event_settings{"min_".lc($key)."_points"};
		$max_subpoints{$key} = $event_settings{"max_".lc($key)."_points"};

		$min_subpoints{$key} = 0 unless $min_subpoints{$key};

		$min_subpoints{"total"} += $min_subpoints{$key} unless $key eq "POI";
		$max_subpoints{"total"} += $max_subpoints{$key} unless $key eq "POI";
	}

	my $trash = pop @scores unless $max_subpoints{"POI"};

	my $errs;

	my %student_values = ();
	my $side_disagree;
	my $speakerorder_disagree;
	my $no_side_constraints++ if $event_settings{'no_side_constraints'};

	my $sidelocks++
		if ($round->type eq "elim"
			|| $round->type eq "final"
			|| $round->type eq "runoff"
		)
		&& not defined $no_side_constraints;

	my $locked;

	undef $no_side_constraints if $event->type eq "speech";
	undef $no_side_constraints if $event->type eq "congress";

	undef $sidelocks if $event->type eq "speech";
	undef $sidelocks if $event->type eq "congress";

	if ($no_side_constraints || ($sidelocks && not defined $locked)) {

		my %taken = ();
		my %sides = ();
		my $changed;

		BALLOT:
		foreach my $ballot (1 .. $ballot_count) {

			my $side = $ARGS{$ballot."_side"};

			if ($sides{$ballot} && ($side != $sides{$ballot})) {
				$side_disagree++;
			}

		}
	}

	if ($no_side_constraints) {
		my %taken = ();
		my %speakerorders = ();
		foreach my $ballot (1 .. $ballot_count) {
			my $speakerorder = $ARGS{$ballot."_speakerorder"};
			$errs .= "<p>You must specify a speaker order for both entries</p>" unless $speakerorder;
		}
	}

	if ($ranks) {

		my %rank_taken;
		my %rank_points;

		foreach my $ballot (1 .. $ballot_count) {
			foreach my $student (1 .. $max_entry) {

				my $rank = $ARGS{$ballot.$student."_ranks"};
				$rank = $event_settings{"truncate_fill"} unless $rank;
				$errs .= "<p>Rank missing for Entry $ballot Student ".$student."</p>" unless $rank;

				next unless $rank;
				$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);
				$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>" if $rank_taken{$rank};

				$rank_taken{$rank}++
					unless $event_settings{"truncate_fill"}
					|| $event_settings{"allow_rank_ties"};

				$student_values{$ballot.$student."_rank"} = $rank;

				if ($points) {
					$rank_points{$rank} = $ARGS{$ballot.$student."_points"};
				}
			}
		}

		my $current;

		foreach my $rk (reverse sort keys %rank_points) {

			if ($rank_points{$rk} < $current) {
				$errs .= "<p>Speaker ranked $rk has worse speaks than a lower ranked student";
				$errs .= "(".$rank_points{$rk}." vs ".$current.")</p>";
			}
			$current = $rank_points{$rk};
		}

		my $num = scalar @entries;
		$num = $event_settings{"truncate_fill"} if $num > $event_settings{"truncate_fill"};

		if ($num) {
			foreach my $rank (1 .. $num) {
				next if $rank == $event_settings{"truncate_fill"};
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}
	}

	if ($team_ranks) {

		my %rank_taken;
		my %rank_points;

		BALLOT:
		foreach my $ballot (1 .. $ballot_count) {

			my $rank;
			my $not_here;

			if ( ($forfeit || $forfeit_last)  && $ARGS{$ballot."_forfeit"}) {
				$entry_values{$ballot."_forfeit"} = 1;
			} else {
				$rank = $ARGS{$ballot."_ranks"};
				$rank = $event_settings{"truncate_fill"} unless $rank;

				unless ($drop_ballot{$ballot}) {

					$errs .= "<p>Rank missing for ".$ballot."</p>" unless $rank;
					next BALLOT unless $rank;

					$errs .= "<p>Rank must be a number</p>" unless ($rank eq $rank+0);

					unless ($event_settings{"allow_rank_ties"}) {
						$errs .= "<p>You have repeated the rank $rank.  All ranks must be unique</p>"
							if $rank_taken{$rank} && ($rank != $event_settings{"truncate_fill"});
					}

					$errs .= "<p>Rank $rank is outside of range</p>" if $rank < 1 || $rank > $ballot_count;
				}

				$rank_taken{$rank}++ if $rank;
				$entry_values{$ballot."_rank"} = $rank if $rank;
			}

			if ($team_points) {
				$rank_points{$rank} = $ARGS{$ballot."_points"};
			}
		}

		if ($forfeit_last) {

			my @ranks = sort {$b <=> $a} keys %rank_taken;
			my $max_rank = shift @ranks;

			foreach my $ballot (1 .. $ballot_count) {
				if ($entry_values{$ballot."_forfeit"}) {
					$entry_values{$ballot."_rank"} = $max_rank;
				}
			}
		}

		my $current;
		my $not_ok;
		my $ok;

		foreach my $rank (sort keys %rank_points) {
			next unless $rank;
			$current =  $rank_points{$rank} unless $current;
			$ok++ if $rank_points{$rank} < $current;
			$not_ok .= ", " if ($rank_points{$rank} > $current) && $not_ok;
			$not_ok .= $rank if $rank_points{$rank} > $current;
			$current = $rank_points{$rank};
		}

		if ($ARGS{"lpw"} && $not_ok && $no_lpw) {

			$errs .= "<p>Rank order must match the order of points given.</p>";

		} elsif ($not_ok && not defined $ARGS{"lpw"}) {

			$errs .= "<p>Entry ranked $not_ok has worse points than a lower ranked entry</p>";
			$errs .= "<p>Rank order must match the order of points given.</p>" if $no_lpw;
			$errs .= "<p>You must mark the low-point rank checkbox if that's what you intend.</p>" unless $no_lpw;

		} elsif ($ARGS{"lpw"} && not defined $not_ok) {

			$errs .= "<p>You marked the low-point rank checkbox, but the ranks are in order of points.  Please check for errors and correct them.</p>";

		}

		my $num = scalar @entries;
		$num = $event_settings{"truncate_fill"} if $num > $event_settings{"truncate_fill"};

		if ($num) {
			foreach my $rank (1 .. $num) {
				next if $rank == $event_settings{"truncate_fill"};
				unless ($rank_taken{$rank}) {
					$errs .= "<p>You are missing the rank ".$rank." </p>";
				}
			}
		}
	}

	if ($team_points) {

		my %points_taken = ();

		BALLOT:
		foreach my $ballot (1 .. $ballot_count) {

			my $points = $ARGS{$ballot."_points"};
			$points = 0 unless $points;
			$points = int($points + 0.5) if $point_increments eq "whole";

			if ($point_increments eq "tenths") {
				$points = $points * 10;
				$points = int($points + 0.5);
				$points = $points/10;
			}

			$points = nearest(.5, $points) if $point_increments eq "half";

			unless ($drop_ballot{$ballot}) {

				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
					if $points_taken{$points} && $point_ties < 1;

				$errs .= "<p>Points $points are outside of range $min_points - $max_points</p>"
					if ($points < $min_points) || ($points > $max_points);

			}

			$points_taken{$points}++;
			$entry_values{$ballot."_points"} += $points;
		}
	}

	if ($points) {

		my %points_taken;

		foreach my $ballot (1 .. $ballot_count) {

			foreach my $student (1 .. $max_entry) {

				my $points = $ARGS{$ballot.$student."_points"};
				$points = 0 unless $points;

				$errs .= "<p>Points missing</p>"
					if $min_points > 0
					&& (not defined $points);

				$errs .= "<p>Points $points below minimum of ".$min_points."</p>"
					if $min_points > $points;

				next unless $points;

				$points = int($points + 0.5) if $point_increments eq "whole";

				if ($point_increments eq "tenths") {
					$points = $points * 10;
					$points = int($points + 0.5);
					$points = $points/10;
				}

				$points = nearest(.5, $points) if $point_increments eq "half";

				$errs .= "<p>$points Points must be a number</p>" unless ($points eq $points+0);

				if ($subscores) {

					my $subtotal;

					foreach my $score (@scores) {

						my $subpoints = $ARGS{$student."_".$score};

						if ($subpoints < $min_subpoints{$score}
							|| $subpoints > $max_subpoints{$score}) {

							$errs .= "<p>Points $subpoints for Student ".$student." are out of range</p>";
						}
						$student_values{$student."_".$score} = $subpoints;
						$subtotal += $subpoints;
					}

					if ($subtotal != $points) {
						$errs .= "<p>Point subscores do not add up to $points</p>";
					}
				}

				$errs .= "<p>Tied points forbidden: you have two speakers with points $points </p>"
					if $points_taken{$points}
					&& $point_ties < 1;

				$errs .= "<p>Points $points are outside of range $min_points - $max_points</p>"
					if $points < $min_points || $points > $max_points;

				$points_taken{$points}++;
				$student_values{$ballot.$student."_points"} = $points;
				$entry_values{$ballot."_points"} += $points;
				$total_points += $points;

			}
		}
	}

	my $winner;

	if ($wins)  {

		my $winning_ballot = $ARGS{"winner"};
		$winner = Tab::Ballot->retrieve($winning_ballot);

		$errs .= "<p>You didn't choose a winner.  There are no ties in debate, though there are sometimes tears.  Be strong.</p>"
		unless $winner;

		$errs .= "<p>Your winner and your chosen side did not agree</p>"
			if $winner
			&& $winner->side != $ARGS{"winner_side"};

		#2nd bit avoid mavericks
		if ($winner && $entry_headcount{$winner} == $max_headcount) {

			my $winner_points = $entry_values{$winner."_points"};

			foreach my $ballot (1 .. $ballot_count) {

				my $bal_points = $entry_values{$ballot."_points"};

				if ($no_lpw) {

					$errs .= "<p>Low point wins are not allowed by this tournament.  Please fix points.</p>"
						if $winner_points < $bal_points;

				} else {

					$errs .= "<p>Please mark if the low-point win is intended.  (Winner has $winner_points, loser has $bal_points)</p>"
						if $winner_points < $bal_points
						&& not defined $ARGS{"lpw"};

					$errs .= "<p>You marked the low-point win box but this isn't a low point win.  (Winner has $winner_points, loser has $bal_points)</p>"
						if $winner_points > $bal_points
						&& $ARGS{"lpw"};
				}
			}
		}
	}

	$judge->setting("ballot_trained", 1);

</%init>

	<div class="main">

		<hr />
		<h6 class="centeralign martopmuchmore bluetext semibold">
			On a real ballot, this screen would show you back your scores!
		</h6>

		<div class="full centeralign">
		<p class="centeralign martopmuchmore ninetenths semibold bigger">
			The system will then ask you to confirm that the scores are correct
			after being displayed here.  Please take a moment to check them over.
			But since this is a training ballot, your scores were not saved this
			time.
		</p>
		</div>

		<h6 class="centeralign martopmuchmore redtext semibold">
			Once you confirm your ballot scores, you cannot change them online.
		</h6>

		<p class="centeralign martop redtext semibold bigger marbottommuchmore">
			You would have to contact the tournament staff to make any further changes
		</p>

		<div class="full centeralign">
			<p class="centeralign ninetenths bigger semibold marbottommore">
				However, you are able to write more comments/feedback until the end of
				the tournament; you just may not change scores. To keep the tournament
				running smoothly, please submit your scores as soon as they are ready,
				then go back and complete your written feedback!
			</p>
		</div>

		<div class="full martopmuchmore">

			<span class="pagehalf centeralign">
				<a
					class = "redtext buttonwhite invert full confirm"
					href  = "panels.mhtml?event_id=<% $event_id %>&judge_id=<% $judge_id %>"
				>
					NO! <% $side_disagree
							? "FIX SIDES PLEASE"
							: "RE-ENTER BALLOT"
						%>
				</a>
			</span>

			<span class="pagehalf centeralign">
				<a
					class = "greentext buttonwhite invert full confirm"
					href  = "panels.mhtml?from=confirmation&event_id=<% $event_id %>&judge_id=<% $judge_id %>"
				>
					YES! CORRECT! CONFIRM IT
				</a>
			</span>
		</div>

	</div>

	<div class="menu">
		<div class="sidenote">

			<h4>RFD</h4>
			<% $ARGS{"rfd"} %>

		</div>
	</div>

