<%args>
	$entry_id           => undef
	$school_id          => undef
	$code               => undef
	$name               => undef
	$ada                => undef
	$online_hybrid      => undef
	$seed               => undef
	$atlarge            => undef
	$from               => undef
	$title              => undef
	$bibliography       => undef
	$author             => undef
	$publisher          => undef
	$publish_date       => undef
	$publish_isbn       => undef
	$publish_print_date => undef
	$publish_url        => undef
</%args>
<%init>

	my $entry = Tab::Entry->retrieve($entry_id);

	unless ($entry > 0) {
		$m->comp("/funclib/abort.mas", message => "$entry_id is not a valid entry ID");
	}

	my $school = Tab::School->retrieve($school_id);

	unless ($school) {
		$school = $entry->school;
	}

	unless ($entry->school == $school) {

		my $hyb_ok;

		foreach my $student ($entry->students) {
			$hyb_ok++ if $student->chapter->id == $school->chapter->id;
		}

		unless ($hyb_ok) {
			$m->comp("/funclib/abort.mas",
				message => "You are not authorized to edit that entry.  Hit back and try again"
			);
		}
	}

	my $event = $entry->event;
	my $tourn = $event->tourn;
	my $housed;

	my %event_settings = $event->all_settings();

	my $code_style = $event_settings{"code_style"};

	my $max = $event_settings{"max_entry"} || 1;
	my $min = $event_settings{"min_entry"} || 1;

	my %entry_settings = $entry->all_settings;
	my %tourn_settings = $tourn->all_settings();

	my $now = DateTime->now();
	my $tz = $tourn->tz;
	$tz = "UTC" unless $tz;

	foreach my $breakout (1 .. $event_settings{"breakouts"}) {
		if ($event_settings{"breakout_".$breakout."_selfreg"}) {
			if ($ARGS{"breakout_".$breakout}) {
				$entry->setting("breakout_".$breakout, 1);
			} else {
				$entry->setting("breakout_".$breakout, 0);
			}
		}
	}

	my $drop_deadline = $tourn_settings{"drop_deadline"};
	my $script_deadline = $tourn_settings{"script_deadline"};
	$drop_deadline = $tourn->reg_end unless $drop_deadline;

	if ($tourn_settings{"nsda_district"}) {
		my $weekend = Tab::Weekend->retrieve($event_settings{"weekend"});

		$drop_deadline = $weekend->drop_deadline;
		$drop_deadline = $weekend->reg_end unless $drop_deadline;
		$script_deadline = $drop_deadline->clone;
	}

	unless ($script_deadline) {
		$script_deadline = $drop_deadline;
	}

	$drop_deadline->set_time_zone("UTC");
	$script_deadline->set_time_zone("UTC");

	$drop_deadline->set_time_zone($tz);
	$script_deadline->set_time_zone($tz);

	my $err;

	if ($now < $script_deadline) {

		if ($event_settings{'ask_for_titles'}) {
			$err = "Piece title required" unless $title;
			$entry->setting("title", $title);
		}

		if ($event_settings{'ask_for_authors'} ) {
			$err = "Piece author required" unless $author;
			$entry->setting("author", $author);
		}

		if ($event_settings{'ask_for_topic'} ) {
			$err = "Speech topic required" unless $ARGS{"topic"};
			$entry->setting("topic", $ARGS{"topic"});
		}

		if ($event_settings{'ask_for_publication'} ) {

			unless (
				( $publisher && $publish_date)
				|| $publish_isbn
				|| ( $publish_print_date && $publish_url)
			) {
				$err = "You must provide either print publication information or a web URL";
			}

			$entry->setting("publisher", $publisher);
			$entry->setting("publish_date", $publish_date);
			$entry->setting("publish_url", $publish_url);
			$entry->setting("publish_isbn", $publish_isbn);

			if ($publish_print_date) {
				my $tz = $tourn->tz;
				$tz = "UTC" unless $tz;
				my $time = "12:00 PM";

				my $published_dt;

				eval { $published_dt = Tab::dtme($publish_print_date, $time, $tz); };

				if ($published_dt) {
					$entry->setting("publish_print_date", "date", $published_dt);
				} else {
					$err = "Invalid publication date: $publish_print_date at $time";
				}

			} else {
				$entry->setting("publish_print_date", 0);
			}
		}

		if (
			($event_settings{"online_mode"} eq "async")
			|| ($event_settings{"ask_for_videos"})

		) {

			unless ($ARGS{"video_link"}) {
				$err = "You must provide a link to the performance";
			}

			if ($entry_settings{"video_link"} ne $ARGS{"video_link"}) {
				if ($ARGS{"video_link"}) {
					$entry->setting("video_link", "text", $ARGS{"video_link"});
				} else {
				$entry->setting("video_link", 0);
				}
				$entry->setting("video_link_tested", 0);
			}
		}

		if ($event_settings{"ask_for_bibliography"}) {
			unless ($bibliography) {
				$err = "You must enter a performance bibliography";
			} else {
				my $text = $m->comp("/funclib/save_editor.mas", text => $bibliography);
				$entry->setting("bibliography", "text", $text);
			}
		}

		if ($event_settings{"ask_for_po"}) {
			if ($ARGS{"po_nominee"}) {
				$entry->setting("po_nominee", 1);
			} else {
				$entry->setting("po_nominee", 0);
			}
		}
	}

	if ($now < $drop_deadline) {

		my %qualifiers = ();
		my $required = $event_settings{'ask_quals'};

		foreach my $step (1 .. $ARGS{"num_quals"}) {

			my $name = $ARGS{$entry->id."_qual_".$step};
			my $result = $ARGS{$entry->id."_result_".$step};

			unless ($name || $step > $required || $atlarge) {
				$err = "Qualifier $step missing";
			}

			next unless $name;
			my $foundit;

			$qualifiers{$step}{"name"} = $name;
			$qualifiers{$step}{"result"} = $result;
		}

		if (scalar (keys %qualifiers)) {
			eval {
				$entry->setting('qualifiers', 'json', \%qualifiers);
			};
		}

		my $other = Tab::Entry->search_where({
			name   => $name,
			school => $school->id,
			event  => $event->id,
			id     => {'!=', $entry->id} }
		)->first;

		if ($other) {
			$err .= "Name $name is already taken.  Choose another";
		} else {
			$entry->name($name);
		}

		my %used_student = ();
		my %students_by_id = ();

		my @students = $entry->students;

		foreach my $student (@students) {
			$students_by_id{$student->id} = $student;
		}

		my $first_name;
		my $last_name;
		my $notfirst;
		my %positions;

		foreach my $step (1 .. $max) {

			my $student_id = $ARGS{"student_".$step};
			next unless $student_id;
			next if $used_student{$student_id};

			my $student = Tab::Student->retrieve($student_id);
			next unless $student;

			if ($students_by_id{$student_id}) {

				$used_student{$student_id}++;

			} else {

				eval {

					my @already = Tab::EntryStudent->search(
						entry => $entry->id,
						student => $student_id
					);

					unless (@already) {
						Tab::EntryStudent->create({
							entry   => $entry->id,
							student => $student_id
						});
					}
				};

			}

			$first_name = $student->first;
			$last_name .= " & " if $notfirst;
			$last_name .= $student->last;
			$notfirst++;

			if ($ARGS{"position_".$step}) {
				$positions{$student->id} = $ARGS{"position_".$step};
			}
		}

		if (keys %positions) {
			$entry->setting("positions", "json", \%positions);
		}

		if ($notfirst == 1) {
			$name = $first_name." ".$last_name unless $name;
		} else {
			$name = $last_name unless $name;
		}

		foreach my $student (@students) {

			next if $used_student{$student->id};

			my $es = Tab::EntryStudent->search(
				entry   => $entry->id,
				student => $student->id
			)->first;

			$es->delete if $es;
		}

		my @count = $entry->students;
		$err .= "You don't have the minimum students to fill this entry." if scalar @count < $min;

		if ($code && $code ne $entry->code) {

			my $other = Tab::Entry->search_where({
				code => $code,
				school => $school->id,
				event => $event->id,
				id => {'!=', $entry->id}
			})->first;

			if ($other) {
				$err .= "Code $code is already taken.  Choose another";
			} else {
				$entry->code($code);
			}

		} elsif ($code ne $entry->code) {

			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));

		}

		$entry->name($name);
		$entry->ada($ada);

		unless ($seed eq $entry_settings{"registered_seed"}) {
			$entry->setting("registered_seed", $seed);
		}

		$online_hybrid = 0 unless $online_hybrid;
		unless ($online_hybrid eq $entry_settings{"online_hybrid"}) {
			$entry->setting("online_hybrid", $online_hybrid);
		}

		if ($seed eq "full") {

			$entry->setting("pairing_seed", 1)
				unless $entry_settings{"pairing_seed"} == 1;

		} elsif ($seed eq "half") {

			$entry->setting("pairing_seed", 2)
				unless $entry_settings{"pairing_seed"} == 2;

		} elsif ($seed eq "free") {

			$entry->setting("pairing_seed", 3)
				unless $entry_settings{"pairing_seed"} == 3;

		} elsif ($event_settings{"apda"}) {

			$entry->setting("pairing_seed", 4)
				unless $entry_settings{"pairing_seed"} == 4;

		}

		if ($event_settings{"waitlist_rank"}) {

			my @waitlisted = $school->entries(
				event    => $event->id,
				waitlist => 1
			);

			my %waitlist_rank;

			foreach my $waitlist (@waitlisted) {
				my $rank = $waitlist->setting("waitlist_rank");
				$rank = scalar @waitlisted unless $rank;
				$waitlist_rank{$waitlist->id} = $rank;
			}

			$waitlist_rank{$entry->id} = $ARGS{"waitlist_rank"} - .01;

			@waitlisted = sort {$waitlist_rank{$a->id} <=> $waitlist_rank{$b->id}} @waitlisted;

			my $counter;

			foreach my $waitlist (@waitlisted) {

				next if $waitlist->id == $entry->id;

				$counter++;
				$counter++ if $counter == $ARGS{'waitlist_rank'};
				$waitlist->setting("waitlist_rank", $counter);
			}

			$entry->setting("waitlist_rank", $ARGS{"waitlist_rank"});
			$entry->setting("waitlist_rank", $counter) unless $ARGS{"waitlist_rank"};

		}

		unless ($atlarge eq $entry_settings{"atlarge"}) {
			$entry->setting("atlarge", $atlarge);
		}

		unless ($code_style eq "numbers"
			|| $code_style eq "school_number"
			|| $code_style eq "schoolname_code"
			|| $code_style eq "school_name_only"
			|| $code_style eq "register") {

			$entry->code($m->comp("/funclib/entry_code.mas", entry => $entry));
		}


		$entry->update;

	}

	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&err=$err") if $err;

	my $msg = "Entry ".$entry->name." details saved";
	$msg =~ s/\&/and/g;

	$m->redirect("onsite.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg") if $from eq "onsite";

	if ($ARGS{savestring} eq "Save and Add New") {
		$m->redirect("students.mhtml?school_id=".$school->id."&event_id=".$event->id."&msg=$msg");
	}

	$m->redirect("details.mhtml?school_id=".$school->id."&entry_id=".$entry->id."&msg=$msg");
</%init>
