<%args>
	$tourn
	$student     => undef
	$name        => undef
	$event       => undef
	$unconfirmed => undef
	$weekend     => undef
	$exclude     => undef
	$competed    => undef
</%args>
<%perl>

	my $limit = "and entry.unconfirmed = 0 ";
	undef $limit if $unconfirmed;

	my $group = " group by entry.id ";
	my $order = " order by event.name, entry.code, entry.id ";

	if ($ARGS{"active"}) {
		$limit .= " and entry.active = 1 ";
	}

	if ($ARGS{"competed"}) {
		$limit .=  " and exists ( select ballot.id from  ballot where ballot.entry = entry.id ) ";
	}

	if ($ARGS{"entry_check"}) {
		undef $group;
		undef $limit;
		$order = " order by entry.active DESC, entry.unconfirmed";
	}

	my $entry_limit = " and entry.id != ".$exclude if $exclude;

	Tab::Entry->columns(TEMP => "studentid");

	if ($event) {

		Tab::Event->set_sql( student_tourn => "
			select distinct entry.*, entry_student.student as studentid
				from event, entry, entry_student
			where entry_student.student = ?
				and entry_student.entry = entry.id
				and entry.event = event.id
				and event.tourn = ?
			$limit
			$entry_limit
			$order
		");

		return Tab::Event->search_student_tourn( $student->id, $tourn->id );
	}

	if ($student) {

		if ($weekend) {

			Tab::Entry->columns(TEMP => "weekendid");

			Tab::Entry->set_sql( by_student_tourn => "
				select distinct entry.*,
					entry_student.student as studentid,
					weekend.value as weekendid
					from entry, entry_student, event, event_setting weekend
				where entry.id = entry_student.entry
					and entry_student.student = ?
					and entry.event   = event.id
					and event.tourn   = ?
					and event.id      = weekend.event
					and weekend.tag   = 'weekend'
					and weekend.value = ?
				$limit
				$entry_limit
				$group
				$order
			");

			return Tab::Entry->search_by_student_tourn($student->id, $tourn->id, $weekend->id);

		} else {

			Tab::Entry->set_sql( by_student_tourn => "
				select distinct entry.*, entry_student.student as studentid
					from entry, entry_student, event
				where entry.id = entry_student.entry
					and entry_student.student = ?
					and entry.event = event.id
					and event.tourn = ?
					$limit
					$entry_limit
				$group
				$order
			");

			return Tab::Entry->search_by_student_tourn($student->id, $tourn->id);

		}
	}

	if ($name) {

		Tab::Entry->set_sql( by_student_name_tourn => "
			select distinct entry.*, entry_student.student as studentid
				from entry, entry_student, event, student
			where entry.id = entry_student.entry
				and entry_student.student = student.id
				and student.last like ?
				and entry.event = event.id
				and event.tourn = ?
			$limit
			$entry_limit
			$group
			$order
		");

		return Tab::Entry->search_by_student_name_tourn($name, $tourn);

	}

</%perl>
