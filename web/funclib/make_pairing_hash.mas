<%args>
	$round_id
</%args>
<%perl>

	# returns 3 basic global hash/arrays; this allows the functions to access
	# the information they need @entries is a global array of all entries in
	# the event; %entries is a hash with record and SOP information in it
	# %precluded stores which teams can't hit each other;

	use POSIX;
	use List::Util 'shuffle';
	use Time::HiRes qw( time );


	my $round = Tab::Round->retrieve($round_id);
	my $event = $round->event;

	my %event_settings = $event->all_settings();

	my $ncfl++ if $event->tourn->setting("ncfl");
	$ncfl++ if $event_settings{'region_constrain'};

	my $side_locked;
	my $side_lock_against = $round->setting('sidelock_against');

    if ($side_lock_against) {
        if ($side_lock_against ne "NONE") {
            $side_locked++;
        }
    } else {
        $side_locked++ unless ($round->name % 2);
        undef $side_locked if $event_settings{"no_side_constraints"};
    }

	#use this round to seed
	my $round_for_seeding;
	my $round_for_sides;
	my $seeding_round_name = $round->name - 1;

	while ( (not defined $round_for_seeding) && $seeding_round_name > 0) {

		$round_for_seeding = Tab::Round->search(
			name  => $seeding_round_name,
			event => $round->event
		)->first;

		$seeding_round_name--;
	}

	if ($side_lock_against) {
		$round_for_sides = Tab::Round->retrieve($side_lock_against);
	} else {
		$round_for_sides = $round_for_seeding;
	}

	# print "This round ID:".$round->id." this round
	# name:".$round->name."<br>"; print "round for seeding
	# id:".$round_dummy[0]->id." round for seeding
	# name:".$round_dummy[0]->name."<br>";

	my $panel = 0;
	my $team1;
	my $team2;
	my $pullup1;
	my $pullup2;
	my $side;

	my $start = time();
	my $end = time();

	my $dbh = Tab::DBI->db_Main();

	my $sth = $dbh->prepare("
		select entry.*, pairing_school.value pairing_school,
			placement.value placement,
			pairing_seed.value pairing_seed,
			region.id region

		from entry

			left join school on school.id = entry.school
			left join region on region.id = school.region

			left join school_setting pairing_school
				on pairing_school.school = entry.school
				and pairing_school.tag = 'pairing_school'

			left join entry_setting placement
				on placement.entry = entry.id
				and placement.tag = 'placement'

			left join entry_setting pairing_seed
				on pairing_seed.entry = entry.id
				and pairing_seed.tag = 'pairing_seed'

		where active = 1
			and event = ?
		group by entry.id
		order by code
	");

	$sth->execute($event->id);
	my $entries = $sth->fetchall_hash();

	#STEP ONE: create hash and put in entry info
	my %entries = ();

	foreach my $entry (@{$entries}) {

		$entries{$entry->{id}}{'code'} = $entry->{code};
		if ($ncfl) {
			$entries{$entry->{id}}{'school'} = $entry->{region};
		} elsif ($entry->{pairing_school}) {
			$entries{$entry->{id}}{'school'} = $entry->{pairing_school};
		} else {
			$entries{$entry->{id}}{'school'} = $entry->{school};
		}

		if ($event_settings{"school_debates_self"}) {
			$entries{$entry->{id}}{'school'} = $entry->{id};
		}

		$entries{$entry->{id}}{'placement'} = $entry->{placement};
		$entries{$entry->{id}}{'placement'} = 0 unless $entries{$entry->{id}}{'placement'};
		$entries{$entry->{id}}{'seed'} = $entry->{pairing_seed};
	}

	# create a hash that stores a boolean value indicating whether teams can
	# debate each other, marked false for same school, hit before, etc.
	my %precluded;
	my %entry_wins;

	# Only process if there are results

	if ( $round_for_seeding ) {

		#Load the win records for each round
		foreach my $other_round ($event->rounds) {

			next if $other_round->type eq "elim";
			next if $other_round->type eq "final";
			next if $other_round->type eq "runoff";

			my %winloss = $m->comp(
				"/funclib/entry_wins.mas",
				event    => $event,
				round    => $other_round,
				first_tb => $event_settings{"bracket_by_ballots"}
			);

			$entry_wins{$other_round->name} = \%winloss;

			if ($other_round->id == $round_for_seeding) {
				foreach my $entry_id (keys %winloss) {
					$entries{$entry_id}{"wins"} = $winloss{$entry_id};
				}
			}
		}

		# Load the number of opp wins and the first tiebreaker for non-SOP
		# pairing; should use seed-nowins for pairing, but next_tb is useful

		my @results = $m->comp(
			"/tabbing/results/order_entries.mas",
			round => $round_for_seeding
		);

		my $score_entries = pop @results;
		my @tb_keys = sort {$a <=> $b} keys %{$score_entries->{"tier_description"}};

		my $first_key;
		my $second_key;

		$first_key = $tb_keys[0] if @tb_keys;
		$second_key = $tb_keys[1] if @tb_keys;

		foreach my $key (sort {$a <=> $b} keys %{$score_entries->{by_place}}) {

			foreach my $entry_id (@{${$score_entries}{"by_place"}{$key}}) {

				$entries{$entry_id}{'next_tb'} = ${$score_entries}{tbs}{$entry_id}{$second_key};

				if ($first_key && (not defined $entries{$entry_id}{'tb_desc'})) {
					$entries{$entry_id}{'tb_desc'} = $score_entries->{"tier_description"}{$first_key};
					$entries{$entry_id}{'tb_long_desc'} = $score_entries->{"tier_long_description"}{$first_key};
				}

				if ($second_key && (not defined $entries{$entry_id}{'next_desc'})) {
					$entries{$entry_id}{'next_desc'} = $score_entries->{"tier_description"}{$second_key};
					$entries{$entry_id}{'next_long_desc'} = $score_entries->{"tier_long_description"}{$second_key};
				}
			}
		}

		my (@opp_results) = $m->comp(
			"/tabbing/results/order_entries.mas",
			round         => $round_for_seeding,
			opp_wins_only => "yep"
		);

		my $opp_entries = pop @opp_results;

		foreach my $entry_id (sort {$a <=> $b} keys %{$opp_entries->{tbs}}) {
			$entries{$entry_id}{'opp_wins'} = $opp_entries->{tbs}{$entry_id}{1};
			$entries{$entry_id}{'opp_ballots'} = $opp_entries->{tbs}{$entry_id}{2};
			$entries{$entry_id}{'opp_seed'} = $opp_entries->{tbs}{$entry_id}{3};
		}

		#STEP THREE: assign the seeds

		if ($round->type ne "prelim") {

			my ($entries_ref, @junque) = $m->comp(
				"/tabbing/results/order_entries.mas",
				round => $round_for_seeding
			);

			my $counter;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				$counter++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					$entries{$entry_id}{'seed'} = $counter;
				}
			}
		}

		#STEP 3.5: assign the seeds without wins. next_tb will display the next tiebreaker but won't fully re-seed

		if ($round->type ne "prelim") {

			my ($entries_ref, @ignore) = $m->comp(
				"/tabbing/results/order_entries.mas",
				round     => $round_for_seeding,
				skip_wins => 42
			);

			my $counter;
			foreach my $key (sort {$a <=> $b} keys %{$entries_ref}) {
				$counter++;
				foreach my $entry_id (@{${$entries_ref}{$key}}) {
					$entries{$entry_id}{'seed_nowins'}=$counter;
				}
			}
		}

		# STEP FOUR: calculate oppseeds.  Also marks debated before preclusions
		# and pullups

		# NOTE:  The code that was here was causing a number of bugs due to the
		# post-loop approach.  The entry getting counted for the bye was the
		# entry before the bye happened, not the actual bye, so their total
		# seed was increasing but the count of opponents wasn't, screwing
		# people over at random.  and the last ballot was being dumped without
		# a result recording.

		# The below is my rewrite, which should also be faster since it does
		# not use the Class::DBI layer which slows things down.  -- CLP

		my $dbh = Tab::DBI->db_Main();

		my $ballots_sth = $dbh->prepare("
			select
				ballot.id, ballot.entry, ballot.panel, ballot.side, ballot.bye,
				panel.bye as panel_bye,
				panel.bracket as bracket,
				opponent.entry,
				round.id, round.type, round.name
			from round
			left outer join panel on panel.round = round.id
			left outer join ballot on ballot.panel = panel.id
			left outer join ballot opponent on opponent.panel = ballot.panel and opponent.entry != ballot.entry
			where round.name <= ?
			and round.event = ?
			order by round.name, ballot.panel
		");

		$ballots_sth->execute($round->name, $event->id);

		my %sides;

		while (
			my (
				$ballot, $entry, $panel, $side, $bye, $panel_bye,
				$bracket,
				$opponent,
				$round, $round_type, $round_name
			) = $ballots_sth->fetchrow_array()
		) {

			if ($round == $round_id) {
				if ($entries{$entry}{"placement"} < $entries{$opponent}{"placement"}) {
					$entries{$entry}{"placement"} = $entries{$opponent}{"placement"};
				}
				next;
			}

			$entries{$entry}{'aff_count'} = 0 unless $entries{$entry}{"aff_count"};
			$entries{$entry}{'neg_count'} = 0 unless $entries{$entry}{"neg_count"};
			next unless $entry;

			if ($bye || $panel_bye || not defined $opponent) {

				#Precludes them from the bye again
				$precluded{$entry}{-1} = 1 if $bye;
				$precluded{$entry}{-1} = 1 if $panel_bye;

			} elsif ($opponent) {

				# mark as ineligible to hit b/c they debated before
				$precluded{$entry}{$opponent} = 1;

				# count how many affs for some reason.  Does this ever get
				# consulted again? Yes, for NSDA districts, where you don't
				# necessarily flip sides each round

				unless ($sides{$entry}{$panel} ) {
					$sides{$entry}{$panel} = $side;
					$entries{$entry}{'aff_count'}++ if $side == 1;
					$entries{$entry}{'neg_count'}++ if $side == 2;
				}

				$entries{$entry}{'n_opp'}++;
				$entries{$entry}{'tot_opp_seed'} += $entries{$opponent}{'seed'};

				my $last_round = $round_name - 1;

				if ($round_type eq "highlow" || $round_type eq "highhigh") {

					$entries{$entry}{'pullup'} = 0 unless $entries{$entry}{'pullup'};
					$entries{$entry}{'pulled_up'} = 0 unless $entries{$entry}{'pulled_up'};
					$entries{$entry}{'got_pullup'} = 0 unless $entries{$entry}{'got_pullup'};

					if ($entry_wins{$last_round}{$entry} < $entry_wins{$last_round}{$opponent}) {

						# You've been pulled up
						$entries{$entry}{'pullup'}++;
						$entries{$entry}{'pulled_up'}++;

					} elsif ($entry_wins{$last_round}{$entry} > $entry_wins{$last_round}{$opponent}) {

						# You've been pulled down, you lucky duck.  Not for long...
						$entries{$entry}{'pullup'}--;
						$entries{$entry}{'got_pullup'}++;
					}
				}
			}

			# Record side due if this is the last round before the present one
			# and we're in a sidelocked situation

			if ($round == $round_for_sides) {

				$entries{$entry}{"last_side"} = $side;

				if ($side_locked) {
					$entries{$entry}{'sidedue'} = ($side % 2) + 1; # 2 becomes 1, 1 becomes 2.
				} else {
					$entries{$entry}{'sidedue'} = 0;
				}
			}

		};

		# if there's some data detritus for teams paired against dropped
		# opponents it adds them to the %entries hash so this thing cleans it up

		foreach my $key ( keys %entries ) {
			if (not $entries{$key}{'code'} ) {
				delete $entries{$key};
			}
		}

		foreach my $key ( keys %entries ) {
			if ( $entries{$key}{'n_opp'} > 0 ) {
				$entries{$key}{'oppseed'} = $entries{$key}{'tot_opp_seed'} / $entries{$key}{'n_opp'} ;
				$entries{$key}{'SOP'} = $entries{$key}{'oppseed'} + $entries{$key}{'seed'} ;
			}
		}
	}

	# CREATE HASH THAT KNOWS WHO CAN DEBATE WHO; hit before constraint added
	# above; hash declared at the very top, so we only need school conflicts

	unless ($event_settings{"school_debates_self"}) {

		my %school_entries;

		foreach my $entry (@{$entries}) {

			my $school_id = $entries{$entry->{id}}{'school'};
			push @{$school_entries{$school_id}}, $entry->{id};
		}

		unless ($event_settings{"hybrids_can_hit"}) {
			#pull hybrid school conflicts
			my @strikes = Tab::Strike->search( tourn => $round->event->tourn, type => 'hybrid' );

			foreach my $strike (@strikes) {
				if ($strike->entry && $strike->school) {
					push (@{$school_entries{$strike->school->id}}, $strike->entry->id);
				}
			}
		}

		foreach my $school (keys %school_entries) {
			foreach my $entry (@{$school_entries{$school}}) {
				foreach my $teammate (@{$school_entries{$school}}) {
					$precluded{$entry}{$teammate} = 1;
				}
			}
		}
	}

	# LOAD CURRENT PAIRINGS AND STORE THEM IN THE HASH

	Tab::Ballot->columns(TEMP => qw/panel_bye/);

	Tab::Ballot->set_sql(current_ballots => "
		select ballot.id, ballot.entry, ballot.panel, ballot.side, panel.bye as panel_bye
		from ballot, panel, round
		where ballot.panel = panel.id
		and panel.round = round.id
		and round.id = ?
		order by round.name, panel.id
	");

	my @pairings_current = Tab::Ballot->search_current_ballots($round->id);

	my $bye;

	my %panel_entries;
	my %entry_panel;
	my @current_entries;

	foreach my $pairing (@pairings_current) {

		next unless $pairing->entry && $pairing->entry->id;

		my $me = $pairing->entry->id;

		push @current_entries, $me;
		$entry_panel{$me} = $pairing->panel->id;

		push @{$panel_entries{$pairing->panel->id}}, $me;

		$entries{$me}{'side'} = $pairing->side;
		$entries{$me}{'opponent'}= -1 if $pairing->panel_bye;
		$entries{$me}{'panel'}= $pairing->panel->id;
	}

	foreach my $me (@current_entries) {
		foreach my $other (@{$panel_entries{$entry_panel{$me}}}) {
			next if $me == $other;
			$entries{$me}{'opponent'}= $other;
		}
	}

	return \%entries, \%precluded ;

</%perl>
