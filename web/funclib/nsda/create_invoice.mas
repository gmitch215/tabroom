<%args>
	$person
	$school    => undef
	$school_id => undef
	$admin     => undef
	$debug     => undef
</%args>
<%init>

    use MIME::Base64;
    use REST::Client;

	$school_id = $ARGS{"target_id"} if ($ARGS{"target_id"} && (not defined $school_id));

	$school = Tab::School->retrieve($school_id) unless $school;

	unless ($school) {
		my $err = "No valid school found for ID $school_id $school";
		$m->redirect("/user/home.mhtml?err=$err");
	}

	my $nsda = eval {
		return int($school->chapter->nsda);
	};

	unless ($nsda) {
		my $err = "That school is not marked as an NSDA member and therefore cannot pay via the NSDA system";
		$m->redirect("fees.mhtml?school_id=".$school->id."&err=$err");
	}

	my $tourn = $school->tourn;
	my %tourn_settings = $tourn->all_settings();

	my %codes = (
		"entries"     => 2001,
		"bond"        => 2003,
		"judges"      => 2103,
		"fines"       => 2101
	);

	if ($tourn_settings{'nsda_ms_nats'}) {
		$codes{"entries"} = 2002;
		$codes{"bond"}    = 2004;
		$codes{"judges"}  = 2104;
		$codes{"fines"}   = 2102;
	};

	if ($tourn_settings{"nsda_billing_entries"}) {
		$codes{"entries"} = int($tourn_settings{"nsda_billing_entries"});
	}
	if ($tourn_settings{"nsda_billing_bonds"}) {
		$codes{"bond"} = int($tourn_settings{"nsda_billing_bonds"});
	}
	if ($tourn_settings{"nsda_billing_judges"}) {
		$codes{"judges"} = int($tourn_settings{"nsda_billing_judges"});
	}
	if ($tourn_settings{"nsda_billing_fines"}) {
		$codes{"fines"} = int($tourn_settings{"nsda_billing_fines"});
	}

	my %concession_codes;
	my %concession_names;

	foreach my $concession ($tourn->concessions) {
		next unless $concession->billing_code;
		$concession_codes{$concession->billing_code}++;
		$concession_names{$concession->billing_code} = $concession->name;
	}

	my ($owed, $feline_ref, $subtotals, $fines_ref, $orders_ref) = $m->comp(
		"/funclib/school_fees.mas",
			all            => 1,
			ignore_judging => $tourn_settings{"ncfl"},
			school         => $school,
			tourn          => $tourn,
			tourn_settings => \%tourn_settings,
		);

	my @invoices = $school->invoices();
	my %totals = %{$subtotals};

	my %invoiced = ();
	my %still_owed = ();

	unless ($debug) {
		foreach my $invoice (@invoices) {

			my %invoice = eval {
				my $tmp = JSON::decode_json($invoice->details);

				if ($tmp->{"owed"}) {
					return %{$tmp->{"owed"}};
				} else {
					return %{$tmp};
				}
			};

			foreach my $key (keys %codes, keys %concession_codes) {
				$invoiced{$key} += $invoice{$key};
			}
		}
	}

	my $total_owed;
	my $total_billed;
	my @items;

	KEY:
	foreach my $key (keys %codes, keys %concession_codes) {

		my $code;

		if ($totals{$key}) {

			$still_owed{$key} = ($totals{$key} - $invoiced{$key});
			$total_owed += $still_owed{$key};

		} elsif ($totals{"concessions_by_code"}{$key}) {

			$codes{$key} = int($key);
			$still_owed{$key} = ($totals{"concessions_by_code"}{$key} - $invoiced{$key});
			$total_owed += $still_owed{$key};

		} elsif ($invoiced{$key}) {

			$total_billed += $invoiced{$key};
		}

		if ($still_owed{$key} > 0 && $codes{$key}) {

			$total_billed += $still_owed{$key};

			my $name = $tourn->name." ".ucfirst($key);

			if ($concession_names{$key}) {
				$name = $tourn->name." ".$concession_names{$key};
			}

			my %item = (
				product_id  => $codes{$key},
				price       => $still_owed{$key},
				invoiceText => $name,
			);

			push @items, \%item;

		}
	}

	if ($total_billed > $total_owed) {

		my $overbilled = $total_billed - $total_owed;

		foreach my $item (@items) {

			my $discount;

			if ($item->{"price"} > $overbilled) {
				$discount = $overbilled;
				undef $overbilled;
			} else {
				$discount = $overbilled - $item->{"price"};
				$overbilled = $overbilled - $discount;
			}

			$item->{"price"} -= $discount;
			last unless $overbilled > 0;
		}
	}

	if ($total_owed > 0 || (@items && $total_billed > $total_owed) || $debug) {

		my %new_invoice;
		if (
			$tourn_settings{'nsda_ms_nats'}
			|| $tourn_settings{'nsda_nats'}
			|| $tourn_settings{'nsda_members_only'}
		) {
			%new_invoice = (
				school_id => $nsda,
				items     => \@items,
				nationals => \1
			);
		} else {
			%new_invoice = (
				school_id => $nsda,
				items     => \@items
			);
		}

		my $json = JSON::encode_json(\%new_invoice);

		if ($debug) {
			$m->clear_buffer();
			$r->content_type('application/json');
			$m->print($json);
			$m->abort();
		}

		my $auth_header = encode_base64($Tab::nsda_api_user.":".$Tab::nsda_api_key);

		my $client = REST::Client->new(
			host => $Tab::nsda_api_endpoint
		);

		$client->POST(
			$Tab::nsda_api_version."/invoices",
			$json,
            {
				'Authorization' => "Basic $auth_header",
				'Content-Type'  => 'application/json',
				'Accept'        => 'application/json'
			}
		);

		my $response_json = $client->responseContent();

		my %answered_invoice = eval {
			return %{JSON::decode_json($response_json)};
		};

		foreach my $key (keys %answered_invoice) {
			$m->print("Key $key value ".$answered_invoice{$key});
		}

		if ($answered_invoice{"message"} eq "Invoice successfully created") {

			my %details = (
				request => \%new_invoice,
				owed    => \%still_owed,
				answer  => \%answered_invoice
			);

			my %trs;
			my $total;

			foreach my $invoice (@{$answered_invoice{"invoices"}}) {

				next if Tab::Invoice->search( blusynergy => $invoice->{"invoiceId"})->first;

				my $tr_invoice = Tab::Invoice->create({
					blusynergy => $invoice->{"invoiceId"},
					blu_number => $invoice->{"number"},
					total      => $invoice->{"total"},
					school     => $school->id,
					paid       => 0,
					details    => JSON::encode_json(\%details)
				});

				$total += $invoice->{total};
				$trs{$invoice->{"number"}} = $tr_invoice;
			}

			if ($total > $total_owed) {

				my $subject = "Invoice repeat alert.  Invoiced total exceeds requested total";
				my $body = " School ID $school ".$school->name." \n";

				foreach my $invoice (@{$answered_invoice{"invoices"}}) {
					my $tr_invoice = $trs{$invoice->{"number"}};
					$body .= " Invoice Tabroom ID ".$tr_invoice." Blu Number ".$tr_invoice->blu_number."\n\n";
					$body .= " Request amount was $total_owed and invoiced amount is $total \n";

					$body .= " URL to BS invoice: https://speechanddebate.blubilling.com/invoice/detail/".$tr_invoice->blusynergy."\n\n";
				}

				$body .= " Request details : ".JSON::encode_json($details{"request"})."\n";
				$body .= " Owed details : ".JSON::encode_json($details{"owed"})."\n";
				$body .= " Response from API : ".JSON::encode_json($details{"answer"})."\n";

				my @accounts;

				foreach my $id (1, 25656, 119870) {
					push @accounts, Tab::Person->retrieve($id);
				}

				my $from_string = "Tabroom Billing <info\@speechanddebate.org>";

				$m->comp("/funclib/send_email.mas",
					accounts    => \@accounts,
					from_string => $from_string,
					real        => 1,
					subject     => $subject,
					body        => $body,
					no_footer   => 1,
					override    => 1
				);
			}

		} else {

			$m->print("<div class='blankfull'>");
			$m->print("<pre>Something went wrong: ".$answered_invoice{"message"}."</pre>");
			$m->print("<pre>".$response_json."</pre>");

			$m->print("<pre>Originating invoice</pre>");
			$m->print("<pre>".$json."</pre>");
			$m->print('<pre> Please send the above message to help@tabroom.com for assistance</pre>');
			$m->abort();

		}
	}

	my $update = $m->comp(
		"/funclib/update_invoices.mas",
		school => $school
	);

	if ($ARGS{'property_name'} eq "async") {

		$m->clear_buffer();
		$r->content_type('application/json');

		my $msg;

		if ($total_owed < 0) {

			$msg .= "Total owed was not positive; invoice not created";

		} elsif ($total_billed > $total_owed) {

			$msg .= "Total owed was not greater than the amount already billed; new invoice not created";

		} else {

			$msg = "Created invoice for ".$school->name." in the amount of $total_owed";

		}

		$m->print('{ "error": false, "message": "'.$msg.'"}');
		$m->abort();

	} elsif ($admin) {

		my $msg = "Invoice created and updated for user";
		$m->redirect("/register/school/invoice.mhtml?school_id=".$school->id."&msg=$msg");

	} elsif ($ARGS{"return"}) {

		return "Done";

	} else {

		$m->redirect("https://account.speechanddebate.org/#/school/".$school->chapter->nsda."/invoices");
	}

</%init>

